
NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000691c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800727c  0800727c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800727c  0800727c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  080072f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080072f4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013597  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00037360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fd1  00000000  00000000  00038438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c46  00000000  00000000  00052409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000946d2  00000000  00000000  0006604f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  000fa774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a10 	.word	0x08006a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08006a10 	.word	0x08006a10

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <__io_putchar+0x20>)
 8000cbe:	f004 fc8c 	bl	80055da <HAL_UART_Transmit>
  return ch;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001a0 	.word	0x200001a0

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f001 fb5b 	bl	8002390 <HAL_Init>

  /* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <main+0xb8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fe42 	bl	800596c <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f85c 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 fa20 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf0:	f000 fa00 	bl	80010f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cf4:	f000 f8fe 	bl	8000ef4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cf8:	f000 f9d2 	bl	80010a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cfc:	f000 f8ac 	bl	8000e58 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d00:	f000 f92e 	bl	8000f60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	RADIO1_Init();
 8000d04:	f000 fa6c 	bl	80011e0 <RADIO1_Init>
	SERVO1_Init();
 8000d08:	f000 fa86 	bl	8001218 <SERVO1_Init>

	// Set the channel, Power amplification, and data rate
	NRF24_SetDataRate(&radio1, NRF24_DATARATE_250KBPS);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <main+0xbc>)
 8000d10:	f000 fd8c 	bl	800182c <NRF24_SetDataRate>
	NRF24_SetPA(&radio1, NRF24_PA_MIN);
 8000d14:	2103      	movs	r1, #3
 8000d16:	481d      	ldr	r0, [pc, #116]	; (8000d8c <main+0xbc>)
 8000d18:	f000 fd52 	bl	80017c0 <NRF24_SetPA>
		NRF24_TXMode(&radio1, (uint8_t*)ADDRESS, CHANNEL);
	}
	// Or if we are configured for Receive mode
	else if (ROLE == RX_MODE){
		// Configure in RX mode with the channel we'd like to receive on
		NRF24_RXMode(&radio1, (uint8_t*)ADDRESS, CHANNEL);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	491c      	ldr	r1, [pc, #112]	; (8000d90 <main+0xc0>)
 8000d20:	481a      	ldr	r0, [pc, #104]	; (8000d8c <main+0xbc>)
 8000d22:	f000 fc7d 	bl	8001620 <NRF24_RXMode>
		NRF24_SetPayloadWidth(&radio1, NRF24_PIPE1, sizeof(joystick1));
 8000d26:	2206      	movs	r2, #6
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <main+0xbc>)
 8000d2c:	f000 fdba 	bl	80018a4 <NRF24_SetPayloadWidth>
	}

	// Calibrate the ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <main+0xc4>)
 8000d32:	f001 fe1f 	bl	8002974 <HAL_ADCEx_Calibration_Start>
			}
		}
		// Or if we are in Receive mode
		else if (ROLE == RX_MODE){
			// Receive the data and store it in the buffer
			NRF24_Receive(&radio1, (uint8_t*)(&joystick1));
 8000d36:	4918      	ldr	r1, [pc, #96]	; (8000d98 <main+0xc8>)
 8000d38:	4814      	ldr	r0, [pc, #80]	; (8000d8c <main+0xbc>)
 8000d3a:	f000 fca1 	bl	8001680 <NRF24_Receive>

			// Display the values
			printf("Vx: %d, Vy: %d, SW: %d\n\r", joystick1.iVX, joystick1.iVY, joystick1.iSW);
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <main+0xc8>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <main+0xc8>)
 8000d46:	885b      	ldrh	r3, [r3, #2]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <main+0xc8>)
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	4813      	ldr	r0, [pc, #76]	; (8000d9c <main+0xcc>)
 8000d50:	f004 fdf4 	bl	800593c <iprintf>

			// Get the angle that we want to move the joystick to
			float fAngle = map(joystick1.iVX, 0, 0xFFF, 0, 180);
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <main+0xc8>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	23b4      	movs	r3, #180	; 0xb4
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d64:	2100      	movs	r1, #0
 8000d66:	f001 fad1 	bl	800230c <map>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff49 	bl	8000c04 <__aeabi_i2f>
 8000d72:	4603      	mov	r3, r0
 8000d74:	607b      	str	r3, [r7, #4]

			// Move the servo to the specified spot
			SERVO_MoveTo(&servo1, fAngle);
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <main+0xd0>)
 8000d7a:	f001 f83d 	bl	8001df8 <SERVO_MoveTo>

			// Wait a second
			HAL_Delay(5);
 8000d7e:	2005      	movs	r0, #5
 8000d80:	f001 fb68 	bl	8002454 <HAL_Delay>
		if(ROLE == TX_MODE){
 8000d84:	e7d7      	b.n	8000d36 <main+0x66>
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	200001e8 	.word	0x200001e8
 8000d90:	08006a4c 	.word	0x08006a4c
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	20000220 	.word	0x20000220
 8000d9c:	08006a54 	.word	0x08006a54
 8000da0:	200001fc 	.word	0x200001fc

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fdba 	bl	800592c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de2:	2301      	movs	r3, #1
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fa73 	bl	80032e4 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e04:	f000 fa36 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e18:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fcdf 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e30:	f000 fa20 	bl	8001274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e34:	2302      	movs	r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fe60 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e4a:	f000 fa13 	bl	8001274 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	; 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e6a:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <MX_ADC1_Init+0x98>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e84:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <MX_ADC1_Init+0x94>)
 8000e98:	f001 fb00 	bl	800249c <HAL_ADC_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ea2:	f000 f9e7 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_ADC1_Init+0x94>)
 8000eb8:	f001 fbc8 	bl	800264c <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 f9d7 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_ADC1_Init+0x94>)
 8000ed4:	f001 fbba 	bl	800264c <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000ede:	f000 f9c9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000008c 	.word	0x2000008c
 8000ef0:	40012400 	.word	0x40012400

08000ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f28:	2218      	movs	r2, #24
 8000f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f40:	220a      	movs	r2, #10
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_SPI1_Init+0x64>)
 8000f46:	f002 ff49 	bl	8003ddc <HAL_SPI_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f50:	f000 f990 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000100 	.word	0x20000100
 8000f5c:	40013000 	.word	0x40013000

08000f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	; 0x58
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2220      	movs	r2, #32
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 fcc7 	bl	800592c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fa0:	4a3e      	ldr	r2, [pc, #248]	; (800109c <MX_TIM1_Init+0x13c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fca:	4833      	ldr	r0, [pc, #204]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fcc:	f003 fc8e 	bl	80048ec <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fd6:	f000 f94d 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482c      	ldr	r0, [pc, #176]	; (8001098 <MX_TIM1_Init+0x138>)
 8000fe8:	f003 fe8c 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ff2:	f000 f93f 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_TIM1_Init+0x138>)
 8000ff8:	f003 fcc7 	bl	800498a <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001002:	f000 f937 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001012:	4619      	mov	r1, r3
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <MX_TIM1_Init+0x138>)
 8001016:	f004 f9e1 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001020:	f000 f928 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_TIM1_Init+0x138>)
 800104a:	f003 fd99 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001054:	f000 f90e 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM1_Init+0x138>)
 800107c:	f004 fa0c 	bl	8005498 <HAL_TIMEx_ConfigBreakDeadTime>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001086:	f000 f8f5 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM1_Init+0x138>)
 800108c:	f000 ffe6 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001090:	bf00      	nop
 8001092:	3758      	adds	r7, #88	; 0x58
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000158 	.word	0x20000158
 800109c:	40012c00 	.word	0x40012c00

080010a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART1_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART1_UART_Init+0x4c>)
 80010d8:	f004 fa2f 	bl	800553a <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8c7 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001a0 	.word	0x200001a0
 80010f0:	40013800 	.word	0x40013800

080010f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_DMA_Init+0x38>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MX_DMA_Init+0x38>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_DMA_Init+0x38>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200b      	movs	r0, #11
 8001118:	f001 fdb1 	bl	8002c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800111c:	200b      	movs	r0, #11
 800111e:	f001 fdca 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_GPIO_Init+0xa4>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <MX_GPIO_Init+0xa4>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <MX_GPIO_Init+0xa4>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_GPIO_Init+0xa4>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xa4>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_GPIO_Init+0xa4>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_GPIO_Init+0xa4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <MX_GPIO_Init+0xa4>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_GPIO_Init+0xa4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2118      	movs	r1, #24
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_GPIO_Init+0xa8>)
 8001192:	f002 f88f 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_GPIO_Init+0xac>)
 80011ac:	f001 fefe 	bl	8002fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80011b0:	2318      	movs	r3, #24
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0xa8>)
 80011c8:	f001 fef0 	bl	8002fac <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40011000 	.word	0x40011000

080011e0 <RADIO1_Init>:

/* USER CODE BEGIN 4 */

static void RADIO1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	radio1.CE_GPIO_Port = GPIOA;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <RADIO1_Init+0x2c>)
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <RADIO1_Init+0x30>)
 80011e8:	609a      	str	r2, [r3, #8]
	radio1.CE_Pin = GPIO_PIN_3;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <RADIO1_Init+0x2c>)
 80011ec:	2208      	movs	r2, #8
 80011ee:	819a      	strh	r2, [r3, #12]
	radio1.CSN_GPIO_Port = GPIOA;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <RADIO1_Init+0x2c>)
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <RADIO1_Init+0x30>)
 80011f4:	601a      	str	r2, [r3, #0]
	radio1.CSN_Pin = GPIO_PIN_4;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <RADIO1_Init+0x2c>)
 80011f8:	2210      	movs	r2, #16
 80011fa:	809a      	strh	r2, [r3, #4]
	radio1.SPI = &hspi1;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <RADIO1_Init+0x2c>)
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <RADIO1_Init+0x34>)
 8001200:	611a      	str	r2, [r3, #16]

	NRF24_Init(&radio1);
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <RADIO1_Init+0x2c>)
 8001204:	f000 f9c1 	bl	800158a <NRF24_Init>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001e8 	.word	0x200001e8
 8001210:	40010800 	.word	0x40010800
 8001214:	20000100 	.word	0x20000100

08001218 <SERVO1_Init>:
  * @brief Servo initialization Function
  * @param None
  * @retval None
  */
static void SERVO1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	servo1.SERVO_GPIO = GPIOA;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <SERVO1_Init+0x44>)
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <SERVO1_Init+0x48>)
 8001220:	601a      	str	r2, [r3, #0]
	servo1.SERVO_PIN = GPIO_PIN_8;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <SERVO1_Init+0x44>)
 8001224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001228:	809a      	strh	r2, [r3, #4]
	servo1.TIM_Instance = TIM1;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SERVO1_Init+0x44>)
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <SERVO1_Init+0x4c>)
 800122e:	609a      	str	r2, [r3, #8]
	servo1.TIM_CCRx = &TIM1->CCR1;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SERVO1_Init+0x44>)
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <SERVO1_Init+0x50>)
 8001234:	60da      	str	r2, [r3, #12]
	servo1.PWM_TIM_CH = TIM_CHANNEL_1;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <SERVO1_Init+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
	servo1.TIM_CLK = 16000000;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <SERVO1_Init+0x44>)
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <SERVO1_Init+0x54>)
 8001240:	615a      	str	r2, [r3, #20]
	servo1.fMinPulse = 0.5;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <SERVO1_Init+0x44>)
 8001244:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001248:	619a      	str	r2, [r3, #24]
	servo1.fMaxPulse = 2.5;
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SERVO1_Init+0x44>)
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <SERVO1_Init+0x58>)
 800124e:	61da      	str	r2, [r3, #28]

	SERVO_Init(&servo1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <SERVO1_Init+0x44>)
 8001252:	f000 fbeb 	bl	8001a2c <SERVO_Init>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001fc 	.word	0x200001fc
 8001260:	40010800 	.word	0x40010800
 8001264:	40012c00 	.word	0x40012c00
 8001268:	40012c34 	.word	0x40012c34
 800126c:	00f42400 	.word	0x00f42400
 8001270:	40200000 	.word	0x40200000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>

0800127e <_NRF24_CSN_Select>:
#include <stdlib.h>

/************* INTERNAL FUNCTIONS *************/

// Send a low signal to the chip select line
void _NRF24_CSN_Select(nRF24Handle* pDev){
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pDev->CSN_GPIO_Port, pDev->CSN_Pin, 0);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	f002 f80f 	bl	80032b4 <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_NRF24_CSN_Unselect>:

// Send a high signal to the chip select line
void _NRF24_CSN_Unselect(nRF24Handle* pDev){
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pDev->CSN_GPIO_Port, pDev->CSN_Pin, 1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	4619      	mov	r1, r3
 80012b2:	f001 ffff 	bl	80032b4 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_NRF24_CE_Enable>:

// Send a high signal to the chip enable line
void _NRF24_CE_Enable(nRF24Handle* pDev){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pDev->CSN_GPIO_Port, pDev->CE_Pin, 1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	899b      	ldrh	r3, [r3, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	f001 ffef 	bl	80032b4 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_NRF24_WriteReg>:
void _NRF24_CE_Disable(nRF24Handle* pDev){
	HAL_GPIO_WritePin(pDev->CSN_GPIO_Port, pDev->CE_Pin, 0);
}

// Write a single byte to the register
void _NRF24_WriteReg(nRF24Handle* pDev, uint8_t reg, uint8_t data){
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	70fb      	strb	r3, [r7, #3]
 80012ea:	4613      	mov	r3, r2
 80012ec:	70bb      	strb	r3, [r7, #2]
	// Select chip using chip select (Active low)
	_NRF24_CSN_Select(pDev);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffc5 	bl	800127e <_NRF24_CSN_Select>

	// Send the write command to the module
	_NRF24_SendCmd(pDev, NRF24_CMD_W_REGISTER(reg));
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f853 	bl	80013aa <_NRF24_SendCmd>

	// Send the write command to the RF24
	HAL_SPI_Transmit(pDev->SPI, &data, 1, 1000);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6918      	ldr	r0, [r3, #16]
 8001308:	1cb9      	adds	r1, r7, #2
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	2201      	movs	r2, #1
 8001310:	f002 fde8 	bl	8003ee4 <HAL_SPI_Transmit>

	// Unselect the module again
	_NRF24_CSN_Unselect(pDev);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ffc2 	bl	800129e <_NRF24_CSN_Unselect>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_NRF24_WriteRegMultiByte>:

// Write multiple bytes to the register
void _NRF24_WriteRegMultiByte(nRF24Handle* pDev, uint8_t reg, uint8_t *pData, uint8_t len){
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	461a      	mov	r2, r3
 800132e:	460b      	mov	r3, r1
 8001330:	72fb      	strb	r3, [r7, #11]
 8001332:	4613      	mov	r3, r2
 8001334:	72bb      	strb	r3, [r7, #10]
	// Select chip using chip select (Active low)
	_NRF24_CSN_Select(pDev);
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ffa1 	bl	800127e <_NRF24_CSN_Select>

	// Send the write command to the module
	_NRF24_SendCmd(pDev, NRF24_CMD_W_REGISTER(reg));
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	f043 0320 	orr.w	r3, r3, #32
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f82f 	bl	80013aa <_NRF24_SendCmd>

	// Send the data itself
	HAL_SPI_Transmit(pDev->SPI, pData, len, 1000);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6918      	ldr	r0, [r3, #16]
 8001350:	7abb      	ldrb	r3, [r7, #10]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	f002 fdc3 	bl	8003ee4 <HAL_SPI_Transmit>

	// Unselect the module again
	_NRF24_CSN_Unselect(pDev);
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff ff9d 	bl	800129e <_NRF24_CSN_Unselect>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_NRF24_ReadReg>:

// Read a single byte from the register
uint8_t _NRF24_ReadReg(nRF24Handle* pDev, uint8_t reg){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	// Select chip using chip select (Active low)
	_NRF24_CSN_Select(pDev);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff80 	bl	800127e <_NRF24_CSN_Select>

	// Send the read command to the RF24
	_NRF24_SendCmd(pDev, NRF24_CMD_R_REGISTER(reg));
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f811 	bl	80013aa <_NRF24_SendCmd>

	// Wait for the data to be received and store it
	uint8_t rxBuf;
	HAL_SPI_Receive(pDev->SPI, &rxBuf, 1, 1000);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6918      	ldr	r0, [r3, #16]
 800138c:	f107 010f 	add.w	r1, r7, #15
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	2201      	movs	r2, #1
 8001396:	f002 fee8 	bl	800416a <HAL_SPI_Receive>

	// Unselect the module again
	_NRF24_CSN_Unselect(pDev);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff7f 	bl	800129e <_NRF24_CSN_Unselect>

	return rxBuf;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_NRF24_SendCmd>:
	_NRF24_CSN_Unselect(pDev);
}

// Send a single command
// For commands, see pg. 48
void _NRF24_SendCmd(nRF24Handle* pDev, uint8_t cmd){
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(pDev->SPI, &cmd, 1, 100);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6918      	ldr	r0, [r3, #16]
 80013ba:	1cf9      	adds	r1, r7, #3
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	2201      	movs	r2, #1
 80013c0:	f002 fd90 	bl	8003ee4 <HAL_SPI_Transmit>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_NRF24_Delay>:

// Issue several NOP commands to make a short delay before reading the Status register
void _NRF24_Delay(nRF24Handle* pDev){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 2; i++){
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e006      	b.n	80013e8 <_NRF24_Delay+0x1c>
		_NRF24_SendCmd(pDev, NRF24_CMD_NOP);
 80013da:	21ff      	movs	r1, #255	; 0xff
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe4 	bl	80013aa <_NRF24_SendCmd>
	for(int i = 0; i < 2; i++){
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	ddf5      	ble.n	80013da <_NRF24_Delay+0xe>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_NRF24_InitAddresses>:

// Initialize all of the TX and RX registers to their default values
void _NRF24_InitAddresses(nRF24Handle* pDev){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// Initialize multi-byte address registers
	uint8_t addrRXP0Default[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001400:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <_NRF24_InitAddresses+0xbc>)
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140a:	6018      	str	r0, [r3, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	7019      	strb	r1, [r3, #0]
	uint8_t addrRXP1Default[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <_NRF24_InitAddresses+0xc0>)
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800141a:	6018      	str	r0, [r3, #0]
 800141c:	3304      	adds	r3, #4
 800141e:	7019      	strb	r1, [r3, #0]
	uint8_t addrTXDefault[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001420:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <_NRF24_InitAddresses+0xbc>)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	7019      	strb	r1, [r3, #0]
	_NRF24_WriteRegMultiByte(pDev, NRF24_REG_RX_ADDR_P0, addrRXP0Default, 5);
 8001430:	f107 021c 	add.w	r2, r7, #28
 8001434:	2305      	movs	r3, #5
 8001436:	210a      	movs	r1, #10
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff72 	bl	8001322 <_NRF24_WriteRegMultiByte>
	_NRF24_WriteRegMultiByte(pDev, NRF24_REG_RX_ADDR_P1, addrRXP1Default, 5);
 800143e:	f107 0214 	add.w	r2, r7, #20
 8001442:	2305      	movs	r3, #5
 8001444:	210b      	movs	r1, #11
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff6b 	bl	8001322 <_NRF24_WriteRegMultiByte>
	_NRF24_WriteRegMultiByte(pDev, NRF24_REG_TX_ADDR, addrTXDefault, 5);
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	2305      	movs	r3, #5
 8001452:	2110      	movs	r1, #16
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff64 	bl	8001322 <_NRF24_WriteRegMultiByte>

	// Initialize single-byte address registers
	uint8_t addrRXP2Default = 0xC3;
 800145a:	23c3      	movs	r3, #195	; 0xc3
 800145c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t addrRXP3Default = 0xC4;
 8001460:	23c4      	movs	r3, #196	; 0xc4
 8001462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t addrRXP4Default = 0xC5;
 8001466:	23c5      	movs	r3, #197	; 0xc5
 8001468:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t addrRXP5Default = 0xC6;
 800146c:	23c6      	movs	r3, #198	; 0xc6
 800146e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P2, addrRXP2Default);
 8001472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001476:	461a      	mov	r2, r3
 8001478:	210c      	movs	r1, #12
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff2f 	bl	80012de <_NRF24_WriteReg>
	_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P3, addrRXP3Default);
 8001480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001484:	461a      	mov	r2, r3
 8001486:	210d      	movs	r1, #13
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff28 	bl	80012de <_NRF24_WriteReg>
	_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P4, addrRXP4Default);
 800148e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001492:	461a      	mov	r2, r3
 8001494:	210e      	movs	r1, #14
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff21 	bl	80012de <_NRF24_WriteReg>
	_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P5, addrRXP5Default);
 800149c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014a0:	461a      	mov	r2, r3
 80014a2:	210f      	movs	r1, #15
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff1a 	bl	80012de <_NRF24_WriteReg>

	if(DEBUG_PRINT){
		printf("******* After Initializing addresses *********\n\r");
		NRF24_PrintDebugInfo(pDev);
	}
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08006a70 	.word	0x08006a70
 80014b8:	08006a78 	.word	0x08006a78

080014bc <_NRF24_FirstWrite>:

// For whatever reason, the first write to the NRF24 usually doesn't work
// By writing a 0x0 to the config, which shouldn't work, I hope to get this
// initial invalid write out of the way to begin with
void _NRF24_FirstWrite(nRF24Handle* pDev){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	// Write 0 to some register. If this is actually the first write, it shouldn't work
	_NRF24_WriteReg(pDev, NRF24_REG_FEATURE, 0x00);
 80014c4:	2200      	movs	r2, #0
 80014c6:	211d      	movs	r1, #29
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff08 	bl	80012de <_NRF24_WriteReg>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_NRF24_ReadPayload>:

// Read the payload from the RX FIFO
void _NRF24_ReadPayload(nRF24Handle* pDev, uint8_t *pData){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	// Select the chip
	_NRF24_CSN_Select(pDev);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fecc 	bl	800127e <_NRF24_CSN_Select>

	// Send the command to dump the payload
	_NRF24_SendCmd(pDev, NRF24_CMD_R_RX_PAYLOAD);
 80014e6:	2161      	movs	r1, #97	; 0x61
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff5e 	bl	80013aa <_NRF24_SendCmd>

	// Received the payload and store it, delaying for up to 1000 seconds
	HAL_SPI_Receive(pDev->SPI, pData, 32, 1000);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6918      	ldr	r0, [r3, #16]
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	2220      	movs	r2, #32
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	f002 fe36 	bl	800416a <HAL_SPI_Receive>

	// Unselect the chip
	_NRF24_CSN_Unselect(pDev);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fecd 	bl	800129e <_NRF24_CSN_Unselect>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_NRF24_SetRegBit>:

// Set a bit in a single-byte register
void _NRF24_SetRegBit(nRF24Handle* pDev, NRF24_REG reg, NRF24_BIT iBit){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
 8001518:	4613      	mov	r3, r2
 800151a:	70bb      	strb	r3, [r7, #2]
	// Read from the the specified register
	uint8_t regVal = _NRF24_ReadReg(pDev, reg);
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	4619      	mov	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff23 	bl	800136c <_NRF24_ReadReg>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]

	// Set the bit
	regVal |= iBit;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	4313      	orrs	r3, r2
 8001530:	73fb      	strb	r3, [r7, #15]

	// Write the val back to the register
	_NRF24_WriteReg(pDev, reg, regVal);
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fed0 	bl	80012de <_NRF24_WriteReg>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_NRF24_ClearRegBit>:

// Unset a bit in a single-byte register
void _NRF24_ClearRegBit(nRF24Handle* pDev, NRF24_REG reg, NRF24_BIT iBit){
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
 8001552:	4613      	mov	r3, r2
 8001554:	70bb      	strb	r3, [r7, #2]
	// Read from the the specified register
	uint8_t regVal = _NRF24_ReadReg(pDev, reg);
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff06 	bl	800136c <_NRF24_ReadReg>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

	// Clear the bit
	regVal &= ~(iBit);
 8001564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001568:	43db      	mvns	r3, r3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001570:	4013      	ands	r3, r2
 8001572:	b25b      	sxtb	r3, r3
 8001574:	73fb      	strb	r3, [r7, #15]

	// Write the val back to the register
	_NRF24_WriteReg(pDev, reg, regVal);
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff feae 	bl	80012de <_NRF24_WriteReg>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <NRF24_Init>:

/********** API FUNCTIONS **************/


void NRF24_Init(nRF24Handle* pDev){
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Issue the first write so that any following writes will actually work
	_NRF24_FirstWrite(pDev);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff92 	bl	80014bc <_NRF24_FirstWrite>

	// Reset the configuration register entirely
	_NRF24_WriteReg(pDev, NRF24_REG_CONFIG, 0x00);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe9e 	bl	80012de <_NRF24_WriteReg>

	// Disable Enhance Shockburst Auto Acknowledge
	_NRF24_WriteReg(pDev, NRF24_REG_EN_AA, 0x00);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fe99 	bl	80012de <_NRF24_WriteReg>

	// Disable RX for all pipes to begin with
	_NRF24_WriteReg(pDev, NRF24_REG_EN_RXADDR, 0x00);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2102      	movs	r1, #2
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fe94 	bl	80012de <_NRF24_WriteReg>

	// Set the first two bits of the address width register to set the address width to five bytes
	_NRF24_WriteReg(pDev, NRF24_REG_SETUP_AW, NRF24_BITS_SETUP_AW__5BYTES);
 80015b6:	2203      	movs	r2, #3
 80015b8:	2103      	movs	r1, #3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fe8f 	bl	80012de <_NRF24_WriteReg>

	// Set no retransmissions, for now
	_NRF24_WriteReg(pDev, NRF24_REG_SETUP_RETR, 0x00);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2104      	movs	r1, #4
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe8a 	bl	80012de <_NRF24_WriteReg>

	// Set the channel to 2.4GHz
	_NRF24_WriteReg(pDev, NRF24_REG_RF_CH, NRF24_BITS_RF_CH__RF_CH(0));
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe85 	bl	80012de <_NRF24_WriteReg>

	// Set the RF Setup for minimum PA and 250kbps
	_NRF24_WriteReg(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR_n18db | NRF24_BITS_RF_SETUP__RF_DR_250KBPS);
 80015d4:	2220      	movs	r2, #32
 80015d6:	2106      	movs	r1, #6
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fe80 	bl	80012de <_NRF24_WriteReg>

	// Flush the FIFOs
	_NRF24_SendCmd(pDev, NRF24_CMD_FLUSH_RX);
 80015de:	21e2      	movs	r1, #226	; 0xe2
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fee2 	bl	80013aa <_NRF24_SendCmd>
	_NRF24_SendCmd(pDev, NRF24_CMD_FLUSH_TX);
 80015e6:	21e1      	movs	r1, #225	; 0xe1
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fede 	bl	80013aa <_NRF24_SendCmd>

	// Delay for a moment to let the FIFO Status register refresh
	_NRF24_Delay(pDev);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff feec 	bl	80013cc <_NRF24_Delay>

	// Clear any and all bits in the status register (Note: we clear these bits by writing 1)
	_NRF24_WriteReg(pDev, NRF24_REG_STATUS, NRF24_BITS_STATUS__RX_DR | NRF24_BITS_STATUS__TX_DS | NRF24_BITS_STATUS__MAX_RT);
 80015f4:	2270      	movs	r2, #112	; 0x70
 80015f6:	2107      	movs	r1, #7
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fe70 	bl	80012de <_NRF24_WriteReg>

	// Reset the RX and TX addresses to default
	_NRF24_InitAddresses(pDev);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fefa 	bl	80013f8 <_NRF24_InitAddresses>

	// Clear the DYNPD register
	_NRF24_WriteReg(pDev, NRF24_REG_DYNPD, 0x00);
 8001604:	2200      	movs	r2, #0
 8001606:	211c      	movs	r1, #28
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fe68 	bl	80012de <_NRF24_WriteReg>

	// Clear the feature register
	_NRF24_WriteReg(pDev, NRF24_REG_FEATURE, 0x00);
 800160e:	2200      	movs	r2, #0
 8001610:	211d      	movs	r1, #29
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe63 	bl	80012de <_NRF24_WriteReg>
	if(DEBUG_PRINT){
		printf("************ Immediately after initialization ************\n\r");

		NRF24_PrintDebugInfo(pDev);
	}
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <NRF24_RXMode>:
	}
}

// Set the RF module to go into RX Mode
// For the time-being, we're just using Pipe 1 for RX purposes
void NRF24_RXMode(nRF24Handle* pDev, uint8_t* pAddr, uint8_t iChannel){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]

	// Power down while configuring
	NRF24_SetPower(pDev, NRF24_POWER_OFF);
 800162e:	2100      	movs	r1, #0
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f86d 	bl	8001710 <NRF24_SetPower>

	// Setup the channel
	NRF24_SetChannel(pDev, iChannel);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f881 	bl	8001742 <NRF24_SetChannel>

	// Set the TX Address to this
	NRF24_SetTXAddr(pDev, pAddr);
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f9de 	bl	8001a04 <NRF24_SetTXAddr>

	// Set pipe 1 to this address
//	NRF24_SetRXAddr(pDev, NRF24_PIPE0, pAddr);
	NRF24_SetRXAddr(pDev, NRF24_PIPE1, pAddr);
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	2101      	movs	r1, #1
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f987 	bl	8001960 <NRF24_SetRXAddr>
//	NRF24_SetRXAddr(pDev, NRF24_PIPE4, pAddr);
//	NRF24_SetRXAddr(pDev, NRF24_PIPE5, pAddr);

	// Enable pipe 1
//	NRF24_SetPipeStatus(pDev, NRF24_PIPE0, NRF24_PIPE_ENABLE);
	NRF24_SetPipeStatus(pDev, NRF24_PIPE1, NRF24_PIPE_ENABLE);
 8001652:	2201      	movs	r2, #1
 8001654:	2101      	movs	r1, #1
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f888 	bl	800176c <NRF24_SetPipeStatus>
//	NRF24_SetPipeStatus(pDev, NRF24_PIPE4, NRF24_PIPE_ENABLE);
//	NRF24_SetPipeStatus(pDev, NRF24_PIPE5, NRF24_PIPE_ENABLE);

	// Set the payload width for pipe 1
//	NRF24_SetPayloadWidth(pDev, NRF24_PIPE0, 32);
	NRF24_SetPayloadWidth(pDev, NRF24_PIPE1, 32);
 800165c:	2220      	movs	r2, #32
 800165e:	2101      	movs	r1, #1
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f91f 	bl	80018a4 <NRF24_SetPayloadWidth>
//	NRF24_SetPayloadWidth(pDev, NRF24_PIPE3, 32);
//	NRF24_SetPayloadWidth(pDev, NRF24_PIPE4, 32);
//	NRF24_SetPayloadWidth(pDev, NRF24_PIPE5, 32);

	// Set the RX bit to go into RX mode
	_NRF24_SetRegBit(pDev, NRF24_REG_CONFIG, NRF24_BITS_CONFIG__PRIM_RX);
 8001666:	2201      	movs	r2, #1
 8001668:	2100      	movs	r1, #0
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff ff4e 	bl	800150c <_NRF24_SetRegBit>

	// Power the module back up
	NRF24_SetPower(pDev, NRF24_POWER_ON);
 8001670:	2101      	movs	r1, #1
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f84c 	bl	8001710 <NRF24_SetPower>

	if(DEBUG_PRINT){
		printf("Info after RX setup:\n\r");
		NRF24_PrintDebugInfo(pDev);
	}
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <NRF24_Receive>:
	return iRetv;
}

// Receive 32 bytes, blocking. Must first call NRF24_RXMode
// Return the pipe we receive from if it's a message, 0 if otherwise
NRF24_PIPE NRF24_Receive(nRF24Handle* pDev, uint8_t* pData){
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	// Leave Standby-I mode and enter RX Mode
	_NRF24_CE_Enable(pDev);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe17 	bl	80012be <_NRF24_CE_Enable>
	if(DEBUG_PRINT){
		printf("Receiving...\n\r");
	}

	// Track how many times we've looped
	uint32_t iTracker = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]

	// Value to hold the status register
	uint8_t regStatus = _NRF24_ReadReg(pDev, NRF24_REG_STATUS);
 8001694:	2107      	movs	r1, #7
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fe68 	bl	800136c <_NRF24_ReadReg>
 800169c:	4603      	mov	r3, r0
 800169e:	75fb      	strb	r3, [r7, #23]

	// Value to hold the FIFO status register
	uint8_t regFIFOStatus = _NRF24_ReadReg(pDev, NRF24_REG_FIFO_STATUS);
 80016a0:	2117      	movs	r1, #23
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fe62 	bl	800136c <_NRF24_ReadReg>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]

	// Loop until the data received flag is set or the RX EMPTY flag is cleared
	while(!(regStatus & NRF24_BITS_STATUS__RX_DR) && (regFIFOStatus & NRF24_BITS_FIFO_STATUS__RX_EMPTY)){
 80016ac:	e011      	b.n	80016d2 <NRF24_Receive+0x52>

		// Delay for a moment
		_NRF24_Delay(pDev);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe8c 	bl	80013cc <_NRF24_Delay>
				printf("Receiving...\n\r");
			}
		}

		// Regather the Status register
		regStatus = _NRF24_ReadReg(pDev, NRF24_REG_STATUS);
 80016b4:	2107      	movs	r1, #7
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fe58 	bl	800136c <_NRF24_ReadReg>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]

		// Regather the FIFO register
		regFIFOStatus = _NRF24_ReadReg(pDev, NRF24_REG_FIFO_STATUS);
 80016c0:	2117      	movs	r1, #23
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fe52 	bl	800136c <_NRF24_ReadReg>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

		// Increment the tracker
		iTracker++;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3301      	adds	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
	while(!(regStatus & NRF24_BITS_STATUS__RX_DR) && (regFIFOStatus & NRF24_BITS_FIFO_STATUS__RX_EMPTY)){
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <NRF24_Receive+0x66>
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e3      	bne.n	80016ae <NRF24_Receive+0x2e>
	}

	// Read the payload
	_NRF24_ReadPayload(pDev, pData);
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fef4 	bl	80014d6 <_NRF24_ReadPayload>

	// Clear the RX Data Received flag (You must set it, to clear, it's counterintuitive)
	_NRF24_SetRegBit(pDev, NRF24_REG_STATUS, NRF24_BITS_STATUS__RX_DR);
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2107      	movs	r1, #7
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff0a 	bl	800150c <_NRF24_SetRegBit>

	// Get the pipe that the current payload came from
	NRF24_PIPE iPayloadPipe = (regStatus & NRF24_BITS_STATUS__RX_P_NO) >> 1;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	73bb      	strb	r3, [r7, #14]

	// Return the pipe that we're receiving from
	return iPayloadPipe;
 8001704:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <NRF24_SetPower>:

	return bRetv;
}

// Power the chip up or down
void NRF24_SetPower(nRF24Handle* pDev, NRF24_POWER iPower){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
	// Switch the power bit off or on
	switch (iPower){
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <NRF24_SetPower+0x1e>
		case NRF24_POWER_ON:
			_NRF24_SetRegBit(pDev, NRF24_REG_CONFIG, NRF24_BITS_CONFIG__PWR_UP);
 8001722:	2202      	movs	r2, #2
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fef0 	bl	800150c <_NRF24_SetRegBit>
			break;
 800172c:	e005      	b.n	800173a <NRF24_SetPower+0x2a>

		case NRF24_POWER_OFF:
		default:
			_NRF24_ClearRegBit(pDev, NRF24_REG_CONFIG, NRF24_BITS_CONFIG__PWR_UP);
 800172e:	2202      	movs	r2, #2
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff07 	bl	8001546 <_NRF24_ClearRegBit>
			break;
 8001738:	bf00      	nop
	}
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <NRF24_SetChannel>:

// Set the channel for the chip to operate on
// Must be a number from 0 - 127
void NRF24_SetChannel(nRF24Handle* pDev, uint8_t iChannel){
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
	// If the channel is higher than 127, set it 127
	iChannel = MIN(iChannel, 0x7F);
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b7f      	cmp	r3, #127	; 0x7f
 8001752:	bf28      	it	cs
 8001754:	237f      	movcs	r3, #127	; 0x7f
 8001756:	70fb      	strb	r3, [r7, #3]

	// Write the channel to the appropriate register
	_NRF24_WriteReg(pDev, NRF24_REG_RF_CH, iChannel);
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	461a      	mov	r2, r3
 800175c:	2105      	movs	r1, #5
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fdbd 	bl	80012de <_NRF24_WriteReg>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <NRF24_SetPipeStatus>:

// Enable/disable a pipe
void NRF24_SetPipeStatus(nRF24Handle* pDev, NRF24_PIPE iPipe, NRF24_PIPE_STATUS iStatus){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
 8001778:	4613      	mov	r3, r2
 800177a:	70bb      	strb	r3, [r7, #2]
	if(iStatus == NRF24_PIPE_ENABLE){
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10b      	bne.n	800179a <NRF24_SetPipeStatus+0x2e>
		_NRF24_SetRegBit(pDev, NRF24_REG_EN_RXADDR, (1 << iPipe));
 8001782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001786:	2201      	movs	r2, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	2102      	movs	r1, #2
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff feba 	bl	800150c <_NRF24_SetRegBit>
	} else if (iStatus == NRF24_PIPE_DISABLE) {
		_NRF24_ClearRegBit(pDev, NRF24_REG_EN_RXADDR, (1 << iPipe));
	}
}
 8001798:	e00d      	b.n	80017b6 <NRF24_SetPipeStatus+0x4a>
	} else if (iStatus == NRF24_PIPE_DISABLE) {
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10a      	bne.n	80017b6 <NRF24_SetPipeStatus+0x4a>
		_NRF24_ClearRegBit(pDev, NRF24_REG_EN_RXADDR, (1 << iPipe));
 80017a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a4:	2201      	movs	r2, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	2102      	movs	r1, #2
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fec8 	bl	8001546 <_NRF24_ClearRegBit>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <NRF24_SetPA>:

// Set the power amplification in dBm
void NRF24_SetPA(nRF24Handle* pDev, NRF24_PA iRFPower){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
	// Clear the power bits initially
	_NRF24_ClearRegBit(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR);
 80017cc:	2206      	movs	r2, #6
 80017ce:	2106      	movs	r1, #6
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff feb8 	bl	8001546 <_NRF24_ClearRegBit>

	// Choose a register bit and set it
	switch(iRFPower){
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d823      	bhi.n	8001824 <NRF24_SetPA+0x64>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <NRF24_SetPA+0x24>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	08001801 	.word	0x08001801
 80017ec:	0800180d 	.word	0x0800180d
 80017f0:	08001819 	.word	0x08001819
		case NRF24_PA_MAX:
			_NRF24_SetRegBit(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR_0db);
 80017f4:	2206      	movs	r2, #6
 80017f6:	2106      	movs	r1, #6
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fe87 	bl	800150c <_NRF24_SetRegBit>
			break;
 80017fe:	e011      	b.n	8001824 <NRF24_SetPA+0x64>
		case NRF24_PA_HIGH:
			_NRF24_SetRegBit(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR_n6db);
 8001800:	2204      	movs	r2, #4
 8001802:	2106      	movs	r1, #6
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe81 	bl	800150c <_NRF24_SetRegBit>
			break;
 800180a:	e00b      	b.n	8001824 <NRF24_SetPA+0x64>
		case NRF24_PA_LOW:
			_NRF24_SetRegBit(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR_n12db);
 800180c:	2202      	movs	r2, #2
 800180e:	2106      	movs	r1, #6
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fe7b 	bl	800150c <_NRF24_SetRegBit>
			break;
 8001816:	e005      	b.n	8001824 <NRF24_SetPA+0x64>
		case NRF24_PA_MIN:
			_NRF24_SetRegBit(pDev, NRF24_REG_RF_SETUP, NRF24_BITS_RF_SETUP__RF_PWR_n18db);
 8001818:	2200      	movs	r2, #0
 800181a:	2106      	movs	r1, #6
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fe75 	bl	800150c <_NRF24_SetRegBit>
			break;
 8001822:	bf00      	nop
	}
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <NRF24_SetDataRate>:

// Set the data rate of the transmission
void NRF24_SetDataRate(nRF24Handle* pDev, NRF24_DATARATE iDataRate){
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
	// Grab the current status of the RF Setup register
	uint8_t regRFSetup = _NRF24_ReadReg(pDev, NRF24_REG_RF_SETUP);
 8001838:	2106      	movs	r1, #6
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fd96 	bl	800136c <_NRF24_ReadReg>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
	// [RF_DR_LOW, RF_DR_HIGH]:
	// '00' - 1Mbps
	// '01' - 2Mbps
	// '10' - 250kbps
	// '11' - Reserved
	switch(iDataRate){
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d018      	beq.n	800187c <NRF24_SetDataRate+0x50>
 800184a:	2b02      	cmp	r3, #2
 800184c:	dc1f      	bgt.n	800188e <NRF24_SetDataRate+0x62>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <NRF24_SetDataRate+0x2c>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d009      	beq.n	800186a <NRF24_SetDataRate+0x3e>
 8001856:	e01a      	b.n	800188e <NRF24_SetDataRate+0x62>
		case NRF24_DATARATE_250KBPS:
			regRFSetup |= NRF24_BITS_RF_SETUP__RF_DR_LOW;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	73fb      	strb	r3, [r7, #15]
			regRFSetup &= ~(NRF24_BITS_RF_SETUP__RF_DR_HIGH);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	f023 0308 	bic.w	r3, r3, #8
 8001866:	73fb      	strb	r3, [r7, #15]
			break;
 8001868:	e011      	b.n	800188e <NRF24_SetDataRate+0x62>
		case NRF24_DATARATE_1MBPS:
			regRFSetup &= ~(NRF24_BITS_RF_SETUP__RF_DR_LOW);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f023 0320 	bic.w	r3, r3, #32
 8001870:	73fb      	strb	r3, [r7, #15]
			regRFSetup &= ~(NRF24_BITS_RF_SETUP__RF_DR_HIGH);
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	73fb      	strb	r3, [r7, #15]
			break;
 800187a:	e008      	b.n	800188e <NRF24_SetDataRate+0x62>
		case NRF24_DATARATE_2MBPS:
			regRFSetup &= ~(NRF24_BITS_RF_SETUP__RF_DR_LOW);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f023 0320 	bic.w	r3, r3, #32
 8001882:	73fb      	strb	r3, [r7, #15]
			regRFSetup |= NRF24_BITS_RF_SETUP__RF_DR_HIGH;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	73fb      	strb	r3, [r7, #15]
			break;
 800188c:	bf00      	nop
	}

	// Write the config back to the register
	_NRF24_WriteReg(pDev, NRF24_REG_RF_SETUP, regRFSetup);
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	461a      	mov	r2, r3
 8001892:	2106      	movs	r1, #6
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fd22 	bl	80012de <_NRF24_WriteReg>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <NRF24_SetPayloadWidth>:
	_NRF24_WriteReg(pDev, NRF24_REG_SETUP_AW, iRegVal);
}

// Set the payload width at a particular pipe
// Must be an integer from 1 to 32 bytes, or 0 to disable the pipe
void NRF24_SetPayloadWidth(nRF24Handle* pDev, NRF24_PIPE iPipe, uint8_t iPW){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
 80018b0:	4613      	mov	r3, r2
 80018b2:	70bb      	strb	r3, [r7, #2]
	// Register of the pipe we want to edit the payload width of
	uint8_t iPipeReg = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

	// Decide which pipe register to write to

	switch(iPipe){
 80018b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d821      	bhi.n	8001904 <NRF24_SetPayloadWidth+0x60>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <NRF24_SetPayloadWidth+0x24>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018e7 	.word	0x080018e7
 80018d0:	080018ed 	.word	0x080018ed
 80018d4:	080018f3 	.word	0x080018f3
 80018d8:	080018f9 	.word	0x080018f9
 80018dc:	080018ff 	.word	0x080018ff
		case NRF24_PIPE0:
			iPipeReg = NRF24_REG_RX_PW_P0;
 80018e0:	2311      	movs	r3, #17
 80018e2:	73fb      	strb	r3, [r7, #15]
			break;
 80018e4:	e00e      	b.n	8001904 <NRF24_SetPayloadWidth+0x60>
		case NRF24_PIPE1:
			iPipeReg = NRF24_REG_RX_PW_P1;
 80018e6:	2312      	movs	r3, #18
 80018e8:	73fb      	strb	r3, [r7, #15]
			break;
 80018ea:	e00b      	b.n	8001904 <NRF24_SetPayloadWidth+0x60>
		case NRF24_PIPE2:
			iPipeReg = NRF24_REG_RX_PW_P2;
 80018ec:	2313      	movs	r3, #19
 80018ee:	73fb      	strb	r3, [r7, #15]
			break;
 80018f0:	e008      	b.n	8001904 <NRF24_SetPayloadWidth+0x60>
		case NRF24_PIPE3:
			iPipeReg = NRF24_REG_RX_PW_P3;
 80018f2:	2314      	movs	r3, #20
 80018f4:	73fb      	strb	r3, [r7, #15]
			break;
 80018f6:	e005      	b.n	8001904 <NRF24_SetPayloadWidth+0x60>
		case NRF24_PIPE4:
			iPipeReg = NRF24_REG_RX_PW_P4;
 80018f8:	2315      	movs	r3, #21
 80018fa:	73fb      	strb	r3, [r7, #15]
			break;
 80018fc:	e002      	b.n	8001904 <NRF24_SetPayloadWidth+0x60>
		case NRF24_PIPE5:
			iPipeReg = NRF24_REG_RX_PW_P5;
 80018fe:	2316      	movs	r3, #22
 8001900:	73fb      	strb	r3, [r7, #15]
			break;
 8001902:	bf00      	nop
	}

	// Write the value to the register
	_NRF24_WriteReg(pDev, iPipeReg, iPW);
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fce7 	bl	80012de <_NRF24_WriteReg>
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <NRF24_GetAddressWidth>:

// Get the address width, in bytes
// Return: 3, 4, or 5
uint8_t NRF24_GetAddressWidth(nRF24Handle* pDev){
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	// Get the value stores in the register
	uint8_t iRegVal = _NRF24_ReadReg(pDev, NRF24_REG_SETUP_AW);
 8001920:	2103      	movs	r1, #3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fd22 	bl	800136c <_NRF24_ReadReg>
 8001928:	4603      	mov	r3, r0
 800192a:	73bb      	strb	r3, [r7, #14]

	// Value signififying the number of bytes in an address
	uint8_t iRetVal = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

	switch (iRegVal){
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d00c      	beq.n	8001950 <NRF24_GetAddressWidth+0x38>
 8001936:	2b03      	cmp	r3, #3
 8001938:	dc0d      	bgt.n	8001956 <NRF24_GetAddressWidth+0x3e>
 800193a:	2b01      	cmp	r3, #1
 800193c:	d002      	beq.n	8001944 <NRF24_GetAddressWidth+0x2c>
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <NRF24_GetAddressWidth+0x32>
 8001942:	e008      	b.n	8001956 <NRF24_GetAddressWidth+0x3e>
		case NRF24_BITS_SETUP_AW__3BYTES:
			iRetVal = 3;
 8001944:	2303      	movs	r3, #3
 8001946:	73fb      	strb	r3, [r7, #15]
			break;
 8001948:	e005      	b.n	8001956 <NRF24_GetAddressWidth+0x3e>

		case NRF24_BITS_SETUP_AW__4BYTES:
			iRetVal = 4;
 800194a:	2304      	movs	r3, #4
 800194c:	73fb      	strb	r3, [r7, #15]
			break;
 800194e:	e002      	b.n	8001956 <NRF24_GetAddressWidth+0x3e>

		case NRF24_BITS_SETUP_AW__5BYTES:
			iRetVal = 5;
 8001950:	2305      	movs	r3, #5
 8001952:	73fb      	strb	r3, [r7, #15]
			break;
 8001954:	bf00      	nop
	}

	return iRetVal;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <NRF24_SetRXAddr>:

// Set the address of one of the RX pipes
// NOTE: The 4 MSB for pipes 1-5 must be identical, and are stored in RX_ADDR_P1 39:8
void NRF24_SetRXAddr(nRF24Handle* pDev, NRF24_PIPE iPipe, uint8_t* pAddr){
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	460b      	mov	r3, r1
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	72fb      	strb	r3, [r7, #11]

	// Retrieve the current address width
	uint8_t iAddressWidth = NRF24_GetAddressWidth(pDev);
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff ffd2 	bl	8001918 <NRF24_GetAddressWidth>
 8001974:	4603      	mov	r3, r0
 8001976:	75fb      	strb	r3, [r7, #23]

	switch (iPipe){
 8001978:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d83d      	bhi.n	80019fc <NRF24_SetRXAddr+0x9c>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <NRF24_SetRXAddr+0x28>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019af 	.word	0x080019af
 8001990:	080019bd 	.word	0x080019bd
 8001994:	080019cd 	.word	0x080019cd
 8001998:	080019dd 	.word	0x080019dd
 800199c:	080019ed 	.word	0x080019ed
		case NRF24_PIPE0:
			_NRF24_WriteRegMultiByte(pDev, NRF24_REG_RX_ADDR_P0, pAddr, iAddressWidth);
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	210a      	movs	r1, #10
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff fcbb 	bl	8001322 <_NRF24_WriteRegMultiByte>
			break;
 80019ac:	e026      	b.n	80019fc <NRF24_SetRXAddr+0x9c>
		case NRF24_PIPE1:
			_NRF24_WriteRegMultiByte(pDev, NRF24_REG_RX_ADDR_P1, pAddr, iAddressWidth);
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	210b      	movs	r1, #11
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff fcb4 	bl	8001322 <_NRF24_WriteRegMultiByte>
			break;
 80019ba:	e01f      	b.n	80019fc <NRF24_SetRXAddr+0x9c>

		// If the address is any of the following, the LSB is stored in the corresponding register
		// And the MSBs are stores in P1
		case NRF24_PIPE2:
			_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P2, *pAddr);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	210c      	movs	r1, #12
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fc8a 	bl	80012de <_NRF24_WriteReg>
			break;
 80019ca:	e017      	b.n	80019fc <NRF24_SetRXAddr+0x9c>

		case NRF24_PIPE3:
			_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P3, *pAddr);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	210d      	movs	r1, #13
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fc82 	bl	80012de <_NRF24_WriteReg>
			break;
 80019da:	e00f      	b.n	80019fc <NRF24_SetRXAddr+0x9c>

		case NRF24_PIPE4:
			_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P4, *pAddr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	210e      	movs	r1, #14
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fc7a 	bl	80012de <_NRF24_WriteReg>
			break;
 80019ea:	e007      	b.n	80019fc <NRF24_SetRXAddr+0x9c>

		case NRF24_PIPE5:
			_NRF24_WriteReg(pDev, NRF24_REG_RX_ADDR_P5, *pAddr);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	210f      	movs	r1, #15
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fc72 	bl	80012de <_NRF24_WriteReg>
			break;
 80019fa:	bf00      	nop
	}
}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <NRF24_SetTXAddr>:

// Set the TX Address
// NOTE: The 4 MSB for pipes 1-5 must be identical, and are stored in RX_ADDR_P1 39:8
void NRF24_SetTXAddr(nRF24Handle* pDev, uint8_t* pAddr){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

	// Retrieve the current address width
	uint8_t iAddressWidth = NRF24_GetAddressWidth(pDev);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff82 	bl	8001918 <NRF24_GetAddressWidth>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]

	// Write the address to the TX_ADDR register
	_NRF24_WriteRegMultiByte(pDev, NRF24_REG_TX_ADDR, pAddr, iAddressWidth);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fc7f 	bl	8001322 <_NRF24_WriteRegMultiByte>

}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <SERVO_Init>:
#include "servo.h"

extern void Error_Handler(void);

void SERVO_Init(SERVO_HandleTypeDef* pDev)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b0b0      	sub	sp, #192	; 0xc0
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t ARR_Value = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (pDev->TIM_CLK / 3276800.0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd5a 	bl	8000538 <__aeabi_ui2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <SERVO_Init+0x2b0>)
 8001a8a:	f7fe fef9 	bl	8000880 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7fe ffdb 	bl	8000a50 <__aeabi_d2uiz>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32_t) ((pDev->TIM_CLK / (50.0 * (PSC_Value + 1.0))) - 1.0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd47 	bl	8000538 <__aeabi_ui2d>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	460d      	mov	r5, r1
 8001aae:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001ab2:	f7fe fd41 	bl	8000538 <__aeabi_ui2d>
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b89      	ldr	r3, [pc, #548]	; (8001ce0 <SERVO_Init+0x2b4>)
 8001abc:	f7fe fc00 	bl	80002c0 <__adddf3>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b85      	ldr	r3, [pc, #532]	; (8001ce4 <SERVO_Init+0x2b8>)
 8001ace:	f7fe fdad 	bl	800062c <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fed1 	bl	8000880 <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <SERVO_Init+0x2b4>)
 8001aec:	f7fe fbe6 	bl	80002bc <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7fe ffaa 	bl	8000a50 <__aeabi_d2uiz>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(pDev->TIM_Instance == TIM1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4a78      	ldr	r2, [pc, #480]	; (8001ce8 <SERVO_Init+0x2bc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10c      	bne.n	8001b26 <SERVO_Init+0xfa>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001b0c:	4b77      	ldr	r3, [pc, #476]	; (8001cec <SERVO_Init+0x2c0>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a76      	ldr	r2, [pc, #472]	; (8001cec <SERVO_Init+0x2c0>)
 8001b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b74      	ldr	r3, [pc, #464]	; (8001cec <SERVO_Init+0x2c0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	e034      	b.n	8001b90 <SERVO_Init+0x164>
	}
	else if(pDev->TIM_Instance == TIM2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d10c      	bne.n	8001b4a <SERVO_Init+0x11e>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001b30:	4b6e      	ldr	r3, [pc, #440]	; (8001cec <SERVO_Init+0x2c0>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a6d      	ldr	r2, [pc, #436]	; (8001cec <SERVO_Init+0x2c0>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <SERVO_Init+0x2c0>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	e022      	b.n	8001b90 <SERVO_Init+0x164>
	}
	else if(pDev->TIM_Instance == TIM3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a68      	ldr	r2, [pc, #416]	; (8001cf0 <SERVO_Init+0x2c4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d10c      	bne.n	8001b6e <SERVO_Init+0x142>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001b54:	4b65      	ldr	r3, [pc, #404]	; (8001cec <SERVO_Init+0x2c0>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a64      	ldr	r2, [pc, #400]	; (8001cec <SERVO_Init+0x2c0>)
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	61d3      	str	r3, [r2, #28]
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <SERVO_Init+0x2c0>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	e010      	b.n	8001b90 <SERVO_Init+0x164>
	}
	else if(pDev->TIM_Instance == TIM4)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a60      	ldr	r2, [pc, #384]	; (8001cf4 <SERVO_Init+0x2c8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d10b      	bne.n	8001b90 <SERVO_Init+0x164>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001b78:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <SERVO_Init+0x2c0>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <SERVO_Init+0x2c0>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <SERVO_Init+0x2c0>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
	}

	htim.Instance = pDev->TIM_Instance;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.Prescaler = PSC_Value;
 8001b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.Period = ARR_Value;
 8001ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44

	if(HAL_TIM_Base_Init(&htim) != HAL_OK)
 8001bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fe9a 	bl	80048ec <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SERVO_Init+0x196>
	{
		Error_Handler();
 8001bbe:	f7ff fb59 	bl	8001274 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	if(HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f895 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SERVO_Init+0x1b8>
	{
	    Error_Handler();
 8001be0:	f7ff fb48 	bl	8001274 <Error_Handler>
	}
	if(HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fece 	bl	800498a <HAL_TIM_PWM_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SERVO_Init+0x1cc>
	{
		Error_Handler();
 8001bf4:	f7ff fb3e 	bl	8001274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if(HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8001c04:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fbe4 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SERVO_Init+0x1f2>
	{
		Error_Handler();
 8001c1a:	f7ff fb2b 	bl	8001274 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1e:	2360      	movs	r3, #96	; 0x60
 8001c20:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if(HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, pDev->PWM_TIM_CH) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 ff9f 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SERVO_Init+0x220>
	{
		Error_Handler();
 8001c48:	f7ff fb14 	bl	8001274 <Error_Handler>
	}

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

	if(pDev->SERVO_GPIO == GPIOA)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <SERVO_Init+0x2cc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10c      	bne.n	8001c70 <SERVO_Init+0x244>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <SERVO_Init+0x2c0>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <SERVO_Init+0x2c0>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <SERVO_Init+0x2c0>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	e05c      	b.n	8001d2a <SERVO_Init+0x2fe>
	}
	else if(pDev->SERVO_GPIO == GPIOB)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <SERVO_Init+0x2d0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10c      	bne.n	8001c94 <SERVO_Init+0x268>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <SERVO_Init+0x2c0>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <SERVO_Init+0x2c0>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6193      	str	r3, [r2, #24]
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <SERVO_Init+0x2c0>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	e04a      	b.n	8001d2a <SERVO_Init+0x2fe>
	}
	else if(pDev->SERVO_GPIO == GPIOC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <SERVO_Init+0x2d4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10c      	bne.n	8001cb8 <SERVO_Init+0x28c>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <SERVO_Init+0x2c0>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <SERVO_Init+0x2c0>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <SERVO_Init+0x2c0>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	e038      	b.n	8001d2a <SERVO_Init+0x2fe>
	}
	else if(pDev->SERVO_GPIO == GPIOD)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <SERVO_Init+0x2d8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d122      	bne.n	8001d08 <SERVO_Init+0x2dc>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <SERVO_Init+0x2c0>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <SERVO_Init+0x2c0>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <SERVO_Init+0x2c0>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	e026      	b.n	8001d2a <SERVO_Init+0x2fe>
 8001cdc:	41490000 	.word	0x41490000
 8001ce0:	3ff00000 	.word	0x3ff00000
 8001ce4:	40490000 	.word	0x40490000
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40011400 	.word	0x40011400
	}
	else if(pDev->SERVO_GPIO == GPIOE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a37      	ldr	r2, [pc, #220]	; (8001dec <SERVO_Init+0x3c0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10b      	bne.n	8001d2a <SERVO_Init+0x2fe>
	{
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <SERVO_Init+0x3c4>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <SERVO_Init+0x3c4>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <SERVO_Init+0x3c4>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
	}
	GPIO_InitStruct.Pin = pDev->SERVO_PIN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	889b      	ldrh	r3, [r3, #4]
 8001d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	HAL_GPIO_Init(pDev->SERVO_GPIO, &GPIO_InitStruct);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 f92c 	bl	8002fac <HAL_GPIO_Init>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	pDev->iMinPeriod = (uint16_t) (ARR_Value * (pDev->fMinPulse / 20.0));
 8001d54:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001d58:	f7fe fbee 	bl	8000538 <__aeabi_ui2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc09 	bl	800057c <__aeabi_f2d>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <SERVO_Init+0x3c8>)
 8001d70:	f7fe fd86 	bl	8000880 <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fc56 	bl	800062c <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe fe62 	bl	8000a50 <__aeabi_d2uiz>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	841a      	strh	r2, [r3, #32]
	pDev->iMaxPeriod = (uint16_t) (ARR_Value * (pDev->fMaxPulse / 20.0));
 8001d94:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001d98:	f7fe fbce 	bl	8000538 <__aeabi_ui2d>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460d      	mov	r5, r1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbe9 	bl	800057c <__aeabi_f2d>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <SERVO_Init+0x3c8>)
 8001db0:	f7fe fd66 	bl	8000880 <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fc36 	bl	800062c <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe fe42 	bl	8000a50 <__aeabi_d2uiz>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	845a      	strh	r2, [r3, #34]	; 0x22

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, pDev->PWM_TIM_CH);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fe2c 	bl	8004a3c <HAL_TIM_PWM_Start>
}
 8001de4:	bf00      	nop
 8001de6:	37c0      	adds	r7, #192	; 0xc0
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	40011800 	.word	0x40011800
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40340000 	.word	0x40340000

08001df8 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(SERVO_HandleTypeDef* pDev, float fAngle)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	uint16_t iPulse = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	81fb      	strh	r3, [r7, #14]

	iPulse = ((fAngle * (pDev->iMaxPeriod - pDev->iMinPeriod)) / 180.0) + pDev->iMinPeriod;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8c1b      	ldrh	r3, [r3, #32]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fef6 	bl	8000c04 <__aeabi_i2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe f995 	bl	800014c <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fba9 	bl	800057c <__aeabi_f2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <SERVO_MoveTo+0x7c>)
 8001e30:	f7fe fd26 	bl	8000880 <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8c1b      	ldrh	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb89 	bl	8000558 <__aeabi_i2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe fa37 	bl	80002c0 <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fdf9 	bl	8000a50 <__aeabi_d2uiz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	81fb      	strh	r3, [r7, #14]

	*(pDev->TIM_CCRx) = iPulse;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	89fa      	ldrh	r2, [r7, #14]
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40668000 	.word	0x40668000

08001e78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_MspInit+0x40>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_MspInit+0x40>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6193      	str	r3, [r2, #24]
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_MspInit+0x40>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_MspInit+0x40>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_MspInit+0x40>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_MspInit+0x40>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_ADC_MspInit+0xbc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d149      	bne.n	8001f70 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_ADC_MspInit+0xc0>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	2303      	movs	r3, #3
 8001f12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4819      	ldr	r0, [pc, #100]	; (8001f80 <HAL_ADC_MspInit+0xc4>)
 8001f1c:	f001 f846 	bl	8002fac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_ADC_MspInit+0xcc>)
 8001f24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f56:	f000 fec9 	bl	8002cec <HAL_DMA_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001f60:	f7ff f988 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f68:	621a      	str	r2, [r3, #32]
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_ADC_MspInit+0xc8>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40012400 	.word	0x40012400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	200000bc 	.word	0x200000bc
 8001f88:	40020008 	.word	0x40020008

08001f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_SPI_MspInit+0x88>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d12f      	bne.n	800200c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_SPI_MspInit+0x8c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fdc:	23a0      	movs	r3, #160	; 0xa0
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	480b      	ldr	r0, [pc, #44]	; (800201c <HAL_SPI_MspInit+0x90>)
 8001ff0:	f000 ffdc 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_SPI_MspInit+0x90>)
 8002008:	f000 ffd0 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40013000 	.word	0x40013000
 8002018:	40021000 	.word	0x40021000
 800201c:	40010800 	.word	0x40010800

08002020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_TIM_Base_MspInit+0x34>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10b      	bne.n	800204a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_TIM_Base_MspInit+0x38>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_TIM_Base_MspInit+0x38>)
 8002038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800203c:	6193      	str	r3, [r2, #24]
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_TIM_Base_MspInit+0x38>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIM_MspPostInit+0x5c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d118      	bne.n	80020ae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_TIM_MspPostInit+0x60>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_TIM_MspPostInit+0x60>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_TIM_MspPostInit+0x60>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <HAL_TIM_MspPostInit+0x64>)
 80020aa:	f000 ff7f 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800

080020c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_UART_MspInit+0x8c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d131      	bne.n	8002148 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_UART_MspInit+0x90>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x90>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0x90>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_UART_MspInit+0x90>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x90>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_UART_MspInit+0x90>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <HAL_UART_MspInit+0x94>)
 800212a:	f000 ff3f 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_UART_MspInit+0x94>)
 8002144:	f000 ff32 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40013800 	.word	0x40013800
 8002154:	40021000 	.word	0x40021000
 8002158:	40010800 	.word	0x40010800

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a2:	f000 f93b 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA1_Channel1_IRQHandler+0x10>)
 80021b2:	f000 fdf5 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200000bc 	.word	0x200000bc

080021c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e00a      	b.n	80021e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021d2:	f3af 8000 	nop.w
 80021d6:	4601      	mov	r1, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	60ba      	str	r2, [r7, #8]
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbf0      	blt.n	80021d2 <_read+0x12>
	}

return len;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e009      	b.n	8002220 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd49 	bl	8000cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf1      	blt.n	800220c <_write+0x12>
	}
	return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_close>:

int _close(int file)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
	return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002258:	605a      	str	r2, [r3, #4]
	return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <_isatty>:

int _isatty(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
	return 0;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f003 fb08 	bl	80058d8 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20005000 	.word	0x20005000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000228 	.word	0x20000228
 80022fc:	20000240 	.word	0x20000240

08002300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <map>:
 */


#include "utility.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	69b9      	ldr	r1, [r7, #24]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	1a8a      	subs	r2, r1, r2
 8002326:	fb03 f202 	mul.w	r2, r3, r2
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1acb      	subs	r3, r1, r3
 8002330:	fb92 f2f3 	sdiv	r2, r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4413      	add	r3, r2
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002344:	f7ff ffdc 	bl	8002300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002360:	4c09      	ldr	r4, [pc, #36]	; (8002388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236e:	f003 fab9 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002372:	f7fe fcad 	bl	8000cd0 <main>
  bx lr
 8002376:	4770      	bx	lr
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002380:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 8002384:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002388:	20000240 	.word	0x20000240

0800238c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC1_2_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x28>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x28>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 fc61 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fd64 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fc79 	bl	8002cd2 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 fc41 	bl	8002c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000000 	.word	0x20000000
 8002414:	20000008 	.word	0x20000008
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x1c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_IncTick+0x20>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_IncTick+0x20>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000008 	.word	0x20000008
 800243c:	2000022c 	.word	0x2000022c

08002440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <HAL_GetTick+0x10>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	2000022c 	.word	0x2000022c

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff fff0 	bl	8002440 <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffe0 	bl	8002440 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0be      	b.n	800263c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fcee 	bl	8001ebc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fa05 	bl	80028f0 <ADC_ConversionStop_Disable>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8099 	bne.w	800262a <HAL_ADC_Init+0x18e>
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8095 	bne.w	800262a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002508:	f023 0302 	bic.w	r3, r3, #2
 800250c:	f043 0202 	orr.w	r2, r3, #2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002524:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d003      	beq.n	800253e <HAL_ADC_Init+0xa2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_ADC_Init+0xa8>
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	e000      	b.n	8002546 <HAL_ADC_Init+0xaa>
 8002544:	2300      	movs	r3, #0
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7d1b      	ldrb	r3, [r3, #20]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d119      	bne.n	8002588 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7b1b      	ldrb	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	3b01      	subs	r3, #1
 8002562:	035a      	lsls	r2, r3, #13
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e00b      	b.n	8002588 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_ADC_Init+0x1a8>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d003      	beq.n	80025c2 <HAL_ADC_Init+0x126>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	051b      	lsls	r3, r3, #20
 80025ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	430a      	orrs	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_ADC_Init+0x1ac>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10b      	bne.n	8002608 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002606:	e018      	b.n	800263a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	f023 0312 	bic.w	r3, r3, #18
 8002610:	f043 0210 	orr.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	ffe1f7fd 	.word	0xffe1f7fd
 8002648:	ff1f0efe 	.word	0xff1f0efe

0800264c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x20>
 8002668:	2302      	movs	r3, #2
 800266a:	e0dc      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1da>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b06      	cmp	r3, #6
 800267a:	d81c      	bhi.n	80026b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b05      	subs	r3, #5
 800268e:	221f      	movs	r2, #31
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4019      	ands	r1, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b05      	subs	r3, #5
 80026a8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
 80026b4:	e03c      	b.n	8002730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d81c      	bhi.n	80026f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b23      	subs	r3, #35	; 0x23
 80026d0:	221f      	movs	r2, #31
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	4019      	ands	r1, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3b23      	subs	r3, #35	; 0x23
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
 80026f6:	e01b      	b.n	8002730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b41      	subs	r3, #65	; 0x41
 800270a:	221f      	movs	r2, #31
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b41      	subs	r3, #65	; 0x41
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d91c      	bls.n	8002772 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68d9      	ldr	r1, [r3, #12]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	3b1e      	subs	r3, #30
 800274a:	2207      	movs	r2, #7
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	4019      	ands	r1, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6898      	ldr	r0, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	3b1e      	subs	r3, #30
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e019      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6919      	ldr	r1, [r3, #16]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	2207      	movs	r2, #7
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	4019      	ands	r1, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6898      	ldr	r0, [r3, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	fa00 f203 	lsl.w	r2, r0, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d003      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027b2:	2b11      	cmp	r3, #17
 80027b4:	d132      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_ADC_ConfigChannel+0x1e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d125      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d11a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_ADC_ConfigChannel+0x1e8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_ADC_ConfigChannel+0x1ec>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9a      	lsrs	r2, r3, #18
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027fc:	e002      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3b01      	subs	r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x1b2>
 800280a:	e007      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012400 	.word	0x40012400
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83

0800283c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d040      	beq.n	80028dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <ADC_Enable+0xac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <ADC_Enable+0xb0>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002878:	e002      	b.n	8002880 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002886:	f7ff fddb 	bl	8002440 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800288c:	e01f      	b.n	80028ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800288e:	f7ff fdd7 	bl	8002440 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d918      	bls.n	80028ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d011      	beq.n	80028ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d1d8      	bne.n	800288e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	431bde83 	.word	0x431bde83

080028f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d12e      	bne.n	8002968 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800291a:	f7ff fd91 	bl	8002440 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002920:	e01b      	b.n	800295a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002922:	f7ff fd8d 	bl	8002440 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d914      	bls.n	800295a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10d      	bne.n	800295a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d0dc      	beq.n	8002922 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ADCEx_Calibration_Start+0x1e>
 800298e:	2302      	movs	r3, #2
 8002990:	e097      	b.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x14e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa8 	bl	80028f0 <ADC_ConversionStop_Disable>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff49 	bl	800283c <ADC_Enable>
 80029aa:	4603      	mov	r3, r0
 80029ac:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 8081 	bne.w	8002ab8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029be:	f023 0302 	bic.w	r3, r3, #2
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029ca:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_ADCEx_Calibration_Start+0x158>)
 80029cc:	681c      	ldr	r4, [r3, #0]
 80029ce:	2002      	movs	r0, #2
 80029d0:	f001 f94e 	bl	8003c70 <HAL_RCCEx_GetPeriphCLKFreq>
 80029d4:	4603      	mov	r3, r0
 80029d6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80029da:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80029dc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80029de:	e002      	b.n	80029e6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029fc:	f7ff fd20 	bl	8002440 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a02:	e01b      	b.n	8002a3c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a04:	f7ff fd1c 	bl	8002440 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d914      	bls.n	8002a3c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f023 0312 	bic.w	r3, r3, #18
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e042      	b.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1dc      	bne.n	8002a04 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0204 	orr.w	r2, r2, #4
 8002a58:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a5a:	f7ff fcf1 	bl	8002440 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a60:	e01b      	b.n	8002a9a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a62:	f7ff fced 	bl	8002440 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b0a      	cmp	r3, #10
 8002a6e:	d914      	bls.n	8002a9a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00d      	beq.n	8002a9a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f023 0312 	bic.w	r3, r3, #18
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e013      	b.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1dc      	bne.n	8002a62 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f023 0303 	bic.w	r3, r3, #3
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4906      	ldr	r1, [pc, #24]	; (8002b68 <__NVIC_EnableIRQ+0x34>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff90 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff2d 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c90:	f7ff ff42 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff90 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff5f 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff35 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffa2 	bl	8002c24 <SysTick_Config>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e043      	b.n	8002d8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_DMA_Init+0xa8>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_DMA_Init+0xac>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_DMA_Init+0xb0>)
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	bffdfff8 	.word	0xbffdfff8
 8002d98:	cccccccd 	.word	0xcccccccd
 8002d9c:	40020000 	.word	0x40020000

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d04f      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xc8>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_DMA_IRQHandler+0x1f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d029      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xae>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_DMA_IRQHandler+0x1f4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xaa>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a63      	ldr	r2, [pc, #396]	; (8002f98 <HAL_DMA_IRQHandler+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0xa4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a62      	ldr	r2, [pc, #392]	; (8002f9c <HAL_DMA_IRQHandler+0x1fc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d012      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x9e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a60      	ldr	r2, [pc, #384]	; (8002fa0 <HAL_DMA_IRQHandler+0x200>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x98>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <HAL_DMA_IRQHandler+0x204>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d102      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x92>
 8002e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e30:	e00e      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e36:	e00b      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e3c:	e008      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e42:	e005      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e48:	e002      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_DMA_IRQHandler+0x208>)
 8002e52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8094 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e66:	e08e      	b.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d056      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x186>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d051      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020a 	bic.w	r2, r2, #10
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a38      	ldr	r2, [pc, #224]	; (8002f90 <HAL_DMA_IRQHandler+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d029      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x166>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a37      	ldr	r2, [pc, #220]	; (8002f94 <HAL_DMA_IRQHandler+0x1f4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x162>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a35      	ldr	r2, [pc, #212]	; (8002f98 <HAL_DMA_IRQHandler+0x1f8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01a      	beq.n	8002efc <HAL_DMA_IRQHandler+0x15c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <HAL_DMA_IRQHandler+0x1fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d012      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x156>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a32      	ldr	r2, [pc, #200]	; (8002fa0 <HAL_DMA_IRQHandler+0x200>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x150>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <HAL_DMA_IRQHandler+0x204>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d102      	bne.n	8002eea <HAL_DMA_IRQHandler+0x14a>
 8002ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ee8:	e00e      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eee:	e00b      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef4:	e008      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efa:	e005      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	e002      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002f02:	2320      	movs	r3, #32
 8002f04:	e000      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002f06:	2302      	movs	r3, #2
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_DMA_IRQHandler+0x208>)
 8002f0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d034      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f24:	e02f      	b.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020e 	bic.w	r2, r2, #14
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
    }
  }
  return;
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
}
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40020008 	.word	0x40020008
 8002f94:	4002001c 	.word	0x4002001c
 8002f98:	40020030 	.word	0x40020030
 8002f9c:	40020044 	.word	0x40020044
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	4002006c 	.word	0x4002006c
 8002fa8:	40020000 	.word	0x40020000

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b08b      	sub	sp, #44	; 0x2c
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbe:	e169      	b.n	8003294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8158 	bne.w	800328e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a9a      	ldr	r2, [pc, #616]	; (800324c <HAL_GPIO_Init+0x2a0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d05e      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8002fe8:	4a98      	ldr	r2, [pc, #608]	; (800324c <HAL_GPIO_Init+0x2a0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d875      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8002fee:	4a98      	ldr	r2, [pc, #608]	; (8003250 <HAL_GPIO_Init+0x2a4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d058      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8002ff4:	4a96      	ldr	r2, [pc, #600]	; (8003250 <HAL_GPIO_Init+0x2a4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d86f      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8002ffa:	4a96      	ldr	r2, [pc, #600]	; (8003254 <HAL_GPIO_Init+0x2a8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d052      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8003000:	4a94      	ldr	r2, [pc, #592]	; (8003254 <HAL_GPIO_Init+0x2a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d869      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003006:	4a94      	ldr	r2, [pc, #592]	; (8003258 <HAL_GPIO_Init+0x2ac>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d04c      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 800300c:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_GPIO_Init+0x2ac>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d863      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003012:	4a92      	ldr	r2, [pc, #584]	; (800325c <HAL_GPIO_Init+0x2b0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d046      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8003018:	4a90      	ldr	r2, [pc, #576]	; (800325c <HAL_GPIO_Init+0x2b0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d85d      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 800301e:	2b12      	cmp	r3, #18
 8003020:	d82a      	bhi.n	8003078 <HAL_GPIO_Init+0xcc>
 8003022:	2b12      	cmp	r3, #18
 8003024:	d859      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <HAL_GPIO_Init+0x80>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	080030a7 	.word	0x080030a7
 8003030:	08003081 	.word	0x08003081
 8003034:	08003093 	.word	0x08003093
 8003038:	080030d5 	.word	0x080030d5
 800303c:	080030db 	.word	0x080030db
 8003040:	080030db 	.word	0x080030db
 8003044:	080030db 	.word	0x080030db
 8003048:	080030db 	.word	0x080030db
 800304c:	080030db 	.word	0x080030db
 8003050:	080030db 	.word	0x080030db
 8003054:	080030db 	.word	0x080030db
 8003058:	080030db 	.word	0x080030db
 800305c:	080030db 	.word	0x080030db
 8003060:	080030db 	.word	0x080030db
 8003064:	080030db 	.word	0x080030db
 8003068:	080030db 	.word	0x080030db
 800306c:	080030db 	.word	0x080030db
 8003070:	08003089 	.word	0x08003089
 8003074:	0800309d 	.word	0x0800309d
 8003078:	4a79      	ldr	r2, [pc, #484]	; (8003260 <HAL_GPIO_Init+0x2b4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800307e:	e02c      	b.n	80030da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	623b      	str	r3, [r7, #32]
          break;
 8003086:	e029      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	e024      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	3308      	adds	r3, #8
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e01f      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	330c      	adds	r3, #12
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e01a      	b.n	80030dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ae:	2304      	movs	r3, #4
 80030b0:	623b      	str	r3, [r7, #32]
          break;
 80030b2:	e013      	b.n	80030dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030bc:	2308      	movs	r3, #8
 80030be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	611a      	str	r2, [r3, #16]
          break;
 80030c6:	e009      	b.n	80030dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c8:	2308      	movs	r3, #8
 80030ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	615a      	str	r2, [r3, #20]
          break;
 80030d2:	e003      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
          break;
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x130>
          break;
 80030da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2bff      	cmp	r3, #255	; 0xff
 80030e0:	d801      	bhi.n	80030e6 <HAL_GPIO_Init+0x13a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	e001      	b.n	80030ea <HAL_GPIO_Init+0x13e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2bff      	cmp	r3, #255	; 0xff
 80030f0:	d802      	bhi.n	80030f8 <HAL_GPIO_Init+0x14c>
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	e002      	b.n	80030fe <HAL_GPIO_Init+0x152>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	3b08      	subs	r3, #8
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	210f      	movs	r1, #15
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	431a      	orrs	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80b1 	beq.w	800328e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312c:	4b4d      	ldr	r3, [pc, #308]	; (8003264 <HAL_GPIO_Init+0x2b8>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a4c      	ldr	r2, [pc, #304]	; (8003264 <HAL_GPIO_Init+0x2b8>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <HAL_GPIO_Init+0x2b8>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_GPIO_Init+0x2bc>)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a40      	ldr	r2, [pc, #256]	; (800326c <HAL_GPIO_Init+0x2c0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_GPIO_Init+0x1ec>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3f      	ldr	r2, [pc, #252]	; (8003270 <HAL_GPIO_Init+0x2c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_GPIO_Init+0x1e8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3e      	ldr	r2, [pc, #248]	; (8003274 <HAL_GPIO_Init+0x2c8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x1e4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3d      	ldr	r2, [pc, #244]	; (8003278 <HAL_GPIO_Init+0x2cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_GPIO_Init+0x1e0>
 8003188:	2303      	movs	r3, #3
 800318a:	e006      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 800318c:	2304      	movs	r3, #4
 800318e:	e004      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003190:	2302      	movs	r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003198:	2300      	movs	r3, #0
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	f002 0203 	and.w	r2, r2, #3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4093      	lsls	r3, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031aa:	492f      	ldr	r1, [pc, #188]	; (8003268 <HAL_GPIO_Init+0x2bc>)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c4:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	492c      	ldr	r1, [pc, #176]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	4928      	ldr	r1, [pc, #160]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4922      	ldr	r1, [pc, #136]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_GPIO_Init+0x2d0>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	43db      	mvns	r3, r3
 8003202:	491e      	ldr	r1, [pc, #120]	; (800327c <HAL_GPIO_Init+0x2d0>)
 8003204:	4013      	ands	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_GPIO_Init+0x2d0>)
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4918      	ldr	r1, [pc, #96]	; (800327c <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_GPIO_Init+0x2d0>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	43db      	mvns	r3, r3
 800322a:	4914      	ldr	r1, [pc, #80]	; (800327c <HAL_GPIO_Init+0x2d0>)
 800322c:	4013      	ands	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d021      	beq.n	8003280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_GPIO_Init+0x2d0>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_GPIO_Init+0x2d0>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e021      	b.n	800328e <HAL_GPIO_Init+0x2e2>
 800324a:	bf00      	nop
 800324c:	10320000 	.word	0x10320000
 8003250:	10310000 	.word	0x10310000
 8003254:	10220000 	.word	0x10220000
 8003258:	10210000 	.word	0x10210000
 800325c:	10120000 	.word	0x10120000
 8003260:	10110000 	.word	0x10110000
 8003264:	40021000 	.word	0x40021000
 8003268:	40010000 	.word	0x40010000
 800326c:	40010800 	.word	0x40010800
 8003270:	40010c00 	.word	0x40010c00
 8003274:	40011000 	.word	0x40011000
 8003278:	40011400 	.word	0x40011400
 800327c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	43db      	mvns	r3, r3
 8003288:	4909      	ldr	r1, [pc, #36]	; (80032b0 <HAL_GPIO_Init+0x304>)
 800328a:	4013      	ands	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae8e 	bne.w	8002fc0 <HAL_GPIO_Init+0x14>
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	372c      	adds	r7, #44	; 0x2c
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e272      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8087 	beq.w	8003412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003304:	4b92      	ldr	r3, [pc, #584]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d112      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <HAL_RCC_OscConfig+0x12c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d168      	bne.n	8003410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e24c      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x76>
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7f      	ldr	r2, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a77      	ldr	r2, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0xbc>
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6e      	ldr	r2, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a67      	ldr	r2, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f83e 	bl	8002440 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff f83a 	bl	8002440 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e200      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe4>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f82a 	bl	8002440 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7ff f826 	bl	8002440 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1ec      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x10c>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c0      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4939      	ldr	r1, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe ffdf 	bl	8002440 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe ffdb 	bl	8002440 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4927      	ldr	r1, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe ffbe 	bl	8002440 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe ffba 	bl	8002440 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e180      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03a      	beq.n	8003568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fe ff9e 	bl	8002440 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe ff9a 	bl	8002440 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e160      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003526:	2001      	movs	r0, #1
 8003528:	f000 face 	bl	8003ac8 <RCC_Delay>
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fe ff84 	bl	8002440 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7fe ff80 	bl	8002440 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d908      	bls.n	800355c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e146      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	42420000 	.word	0x42420000
 8003558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e9      	bne.n	800353c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a6 	beq.w	80036c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	61d3      	str	r3, [r2, #28]
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe ff41 	bl	8002440 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fe ff3d 	bl	8002440 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e103      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x312>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e02d      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x334>
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e01c      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x356>
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fe fef1 	bl	8002440 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe feed 	bl	8002440 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0b1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCC_OscConfig+0x37e>
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fe fedb 	bl	8002440 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe fed7 	bl	8002440 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d061      	beq.n	800379c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d146      	bne.n	800376e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fe feab 	bl	8002440 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe fea7 	bl	8002440 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e06d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a19      	ldr	r1, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	430b      	orrs	r3, r1
 800373a:	491b      	ldr	r1, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe fe7b 	bl	8002440 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe fe77 	bl	8002440 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x46a>
 800376c:	e035      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe fe64 	bl	8002440 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe fe60 	bl	8002440 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e026      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x498>
 800379a:	e01e      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e019      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_OscConfig+0x500>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d0      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4965      	ldr	r1, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d040      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e073      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4936      	ldr	r1, [pc, #216]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fdb2 	bl	8002440 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fdae 	bl	8002440 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e053      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d210      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fd10 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	080071a4 	.word	0x080071a4
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x30>
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x36>
 80039ea:	e027      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ee:	613b      	str	r3, [r7, #16]
      break;
 80039f0:	e027      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	0c9b      	lsrs	r3, r3, #18
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
 80039fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0c5b      	lsrs	r3, r3, #17
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a1e:	fb03 f202 	mul.w	r2, r3, r2
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e004      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	613b      	str	r3, [r7, #16]
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3e:	613b      	str	r3, [r7, #16]
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	693b      	ldr	r3, [r7, #16]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	080071bc 	.word	0x080071bc
 8003a5c:	080071cc 	.word	0x080071cc
 8003a60:	003d0900 	.word	0x003d0900

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	080071b4 	.word	0x080071b4

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffde 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	0adb      	lsrs	r3, r3, #11
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	080071b4 	.word	0x080071b4

08003ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <RCC_Delay+0x34>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <RCC_Delay+0x38>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	0a5b      	lsrs	r3, r3, #9
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ae4:	bf00      	nop
  }
  while (Delay --);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	60fa      	str	r2, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f9      	bne.n	8003ae4 <RCC_Delay+0x1c>
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000000 	.word	0x20000000
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d07d      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b24:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	61d3      	str	r3, [r2, #28]
 8003b3c:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d118      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b64:	f7fe fc6c 	bl	8002440 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	e008      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fe fc68 	bl	8002440 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e06d      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02e      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d027      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bbe:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe fc37 	bl	8002440 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fc33 	bl	8002440 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e036      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ee      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	490b      	ldr	r1, [pc, #44]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4904      	ldr	r1, [pc, #16]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	42420440 	.word	0x42420440

08003c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	f200 808a 	bhi.w	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d045      	beq.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d075      	beq.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ca6:	e082      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ca8:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cae:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d07b      	beq.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0c9b      	lsrs	r3, r3, #18
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	0c5b      	lsrs	r3, r3, #17
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d08:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d14:	d102      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	61bb      	str	r3, [r7, #24]
      break;
 8003d1a:	e04a      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
      break;
 8003d2a:	e042      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e01f      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5a:	d109      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d68:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e00f      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7a:	d11c      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d016      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d8c:	61bb      	str	r3, [r7, #24]
      break;
 8003d8e:	e012      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d90:	e011      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d92:	f7ff fe85 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0b9b      	lsrs	r3, r3, #14
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61bb      	str	r3, [r7, #24]
      break;
 8003dac:	e004      	b.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003db6:	bf00      	nop
    }
  }
  return (frequency);
 8003db8:	69bb      	ldr	r3, [r7, #24]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	080071d0 	.word	0x080071d0
 8003dcc:	080071e0 	.word	0x080071e0
 8003dd0:	007a1200 	.word	0x007a1200
 8003dd4:	003d0900 	.word	0x003d0900
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab

08003ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e076      	b.n	8003edc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
 8003e06:	e005      	b.n	8003e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fe f8ac 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	0c1a      	lsrs	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f002 0204 	and.w	r2, r2, #4
 8003eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_SPI_Transmit+0x22>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e12d      	b.n	8004162 <HAL_SPI_Transmit+0x27e>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0e:	f7fe fa97 	bl	8002440 <HAL_GetTick>
 8003f12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d002      	beq.n	8003f2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f28:	e116      	b.n	8004158 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_SPI_Transmit+0x52>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f3a:	e10d      	b.n	8004158 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d10f      	bne.n	8003fa4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d007      	beq.n	8003fc2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d14f      	bne.n	800406c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Transmit+0xf6>
 8003fd4:	8afb      	ldrh	r3, [r7, #22]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d142      	bne.n	8004060 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	1c9a      	adds	r2, r3, #2
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ffe:	e02f      	b.n	8004060 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d112      	bne.n	8004034 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	1c9a      	adds	r2, r3, #2
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	86da      	strh	r2, [r3, #54]	; 0x36
 8004032:	e015      	b.n	8004060 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004034:	f7fe fa04 	bl	8002440 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d803      	bhi.n	800404c <HAL_SPI_Transmit+0x168>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d102      	bne.n	8004052 <HAL_SPI_Transmit+0x16e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800405e:	e07b      	b.n	8004158 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ca      	bne.n	8004000 <HAL_SPI_Transmit+0x11c>
 800406a:	e050      	b.n	800410e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit+0x196>
 8004074:	8afb      	ldrh	r3, [r7, #22]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d144      	bne.n	8004104 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	7812      	ldrb	r2, [r2, #0]
 8004086:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040a0:	e030      	b.n	8004104 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d113      	bne.n	80040d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80040d6:	e015      	b.n	8004104 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d8:	f7fe f9b2 	bl	8002440 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d803      	bhi.n	80040f0 <HAL_SPI_Transmit+0x20c>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d102      	bne.n	80040f6 <HAL_SPI_Transmit+0x212>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004102:	e029      	b.n	8004158 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1c9      	bne.n	80040a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fbcc 	bl	80048b0 <SPI_EndRxTxTransaction>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e003      	b.n	8004158 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004160:	7ffb      	ldrb	r3, [r7, #31]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b088      	sub	sp, #32
 800416e:	af02      	add	r7, sp, #8
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800418e:	e0fb      	b.n	8004388 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004198:	d112      	bne.n	80041c0 <HAL_SPI_Receive+0x56>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10e      	bne.n	80041c0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2204      	movs	r2, #4
 80041a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8ef 	bl	800439a <HAL_SPI_TransmitReceive>
 80041bc:	4603      	mov	r3, r0
 80041be:	e0e8      	b.n	8004392 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Receive+0x64>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0e1      	b.n	8004392 <HAL_SPI_Receive+0x228>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041d6:	f7fe f933 	bl	8002440 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_Receive+0x7e>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041ec:	e0cc      	b.n	8004388 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2204      	movs	r2, #4
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	d10f      	bne.n	8004256 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d007      	beq.n	8004274 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d16a      	bne.n	8004352 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800427c:	e032      	b.n	80042e4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d115      	bne.n	80042b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f103 020c 	add.w	r2, r3, #12
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042b6:	e015      	b.n	80042e4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b8:	f7fe f8c2 	bl	8002440 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d803      	bhi.n	80042d0 <HAL_SPI_Receive+0x166>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_Receive+0x16c>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042e2:	e051      	b.n	8004388 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1c7      	bne.n	800427e <HAL_SPI_Receive+0x114>
 80042ee:	e035      	b.n	800435c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d113      	bne.n	8004326 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	b292      	uxth	r2, r2
 800430a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	1c9a      	adds	r2, r3, #2
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004324:	e015      	b.n	8004352 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004326:	f7fe f88b 	bl	8002440 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d803      	bhi.n	800433e <HAL_SPI_Receive+0x1d4>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d102      	bne.n	8004344 <HAL_SPI_Receive+0x1da>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004350:	e01a      	b.n	8004388 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1c9      	bne.n	80042f0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fa53 	bl	800480c <SPI_EndRxTransaction>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
 800437e:	e003      	b.n	8004388 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b08c      	sub	sp, #48	; 0x30
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x26>
 80043bc:	2302      	movs	r3, #2
 80043be:	e198      	b.n	80046f2 <HAL_SPI_TransmitReceive+0x358>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c8:	f7fe f83a 	bl	8002440 <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d00f      	beq.n	800440a <HAL_SPI_TransmitReceive+0x70>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f0:	d107      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x68>
 80043fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d003      	beq.n	800440a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004408:	e16d      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_SPI_TransmitReceive+0x82>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_TransmitReceive+0x82>
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004422:	e160      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b04      	cmp	r3, #4
 800442e:	d003      	beq.n	8004438 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2205      	movs	r2, #5
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d007      	beq.n	800448c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004494:	d17c      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x10a>
 800449e:	8b7b      	ldrh	r3, [r7, #26]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d16a      	bne.n	800457a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	1c9a      	adds	r2, r3, #2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c8:	e057      	b.n	800457a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d11b      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x176>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x176>
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d113      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d119      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x1b8>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d014      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	b292      	uxth	r2, r2
 8004534:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	1c9a      	adds	r2, r3, #2
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800454e:	2301      	movs	r3, #1
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004552:	f7fd ff75 	bl	8002440 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800455e:	429a      	cmp	r2, r3
 8004560:	d80b      	bhi.n	800457a <HAL_SPI_TransmitReceive+0x1e0>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d007      	beq.n	800457a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004578:	e0b5      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1a2      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x130>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d19d      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x130>
 800458e:	e080      	b.n	8004692 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_SPI_TransmitReceive+0x204>
 8004598:	8b7b      	ldrh	r3, [r7, #26]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d16f      	bne.n	800467e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c4:	e05b      	b.n	800467e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d11c      	bne.n	800460e <HAL_SPI_TransmitReceive+0x274>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d017      	beq.n	800460e <HAL_SPI_TransmitReceive+0x274>
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d114      	bne.n	800460e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d119      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x2b6>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d014      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800464c:	2301      	movs	r3, #1
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004650:	f7fd fef6 	bl	8002440 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800465c:	429a      	cmp	r2, r3
 800465e:	d803      	bhi.n	8004668 <HAL_SPI_TransmitReceive+0x2ce>
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d102      	bne.n	800466e <HAL_SPI_TransmitReceive+0x2d4>
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800467c:	e033      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d19e      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x22c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d199      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f90a 	bl	80048b0 <SPI_EndRxTxTransaction>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d006      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046ae:	e01a      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046dc:	e003      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3730      	adds	r7, #48	; 0x30
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800470c:	f7fd fe98 	bl	8002440 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800471c:	f7fd fe90 	bl	8002440 <HAL_GetTick>
 8004720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	015b      	lsls	r3, r3, #5
 8004728:	0d1b      	lsrs	r3, r3, #20
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004732:	e054      	b.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d050      	beq.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800473c:	f7fd fe80 	bl	8002440 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	429a      	cmp	r2, r3
 800474a:	d902      	bls.n	8004752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13d      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800476a:	d111      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d004      	beq.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d107      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d10f      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e017      	b.n	80047fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3b01      	subs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d19b      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000000 	.word	0x20000000

0800480c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004820:	d111      	bne.n	8004846 <SPI_EndRxTransaction+0x3a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482a:	d004      	beq.n	8004836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004834:	d107      	bne.n	8004846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004844:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d117      	bne.n	8004880 <SPI_EndRxTransaction+0x74>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d112      	bne.n	8004880 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2200      	movs	r2, #0
 8004862:	2101      	movs	r1, #1
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff49 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01a      	beq.n	80048a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e013      	b.n	80048a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2200      	movs	r2, #0
 8004888:	2180      	movs	r1, #128	; 0x80
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff ff36 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e000      	b.n	80048a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff ff18 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e000      	b.n	80048e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e041      	b.n	8004982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fb84 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fab2 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e041      	b.n	8004a20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f839 	bl	8004a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f000 fa63 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
	...

08004a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_PWM_Start+0x24>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e022      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d109      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x3e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e015      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_PWM_Start+0x58>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e008      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e05e      	b.n	8004b6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0x82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0x92>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc50 	bl	8005394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_TIM_PWM_Start+0x138>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d107      	bne.n	8004b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_TIM_PWM_Start+0x138>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIM_PWM_Start+0xfa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d009      	beq.n	8004b36 <HAL_TIM_PWM_Start+0xfa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <HAL_TIM_PWM_Start+0x13c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIM_PWM_Start+0xfa>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <HAL_TIM_PWM_Start+0x140>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d111      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b06      	cmp	r3, #6
 8004b46:	d010      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b58:	e007      	b.n	8004b6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800

08004b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0ae      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	f200 809f 	bhi.w	8004cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004ced 	.word	0x08004ced
 8004bbc:	08004ced 	.word	0x08004ced
 8004bc0:	08004ced 	.word	0x08004ced
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004ced 	.word	0x08004ced
 8004bcc:	08004ced 	.word	0x08004ced
 8004bd0:	08004ced 	.word	0x08004ced
 8004bd4:	08004c6b 	.word	0x08004c6b
 8004bd8:	08004ced 	.word	0x08004ced
 8004bdc:	08004ced 	.word	0x08004ced
 8004be0:	08004ced 	.word	0x08004ced
 8004be4:	08004cab 	.word	0x08004cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9b2 	bl	8004f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	619a      	str	r2, [r3, #24]
      break;
 8004c26:	e064      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f9f8 	bl	8005024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e043      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fa41 	bl	80050f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0204 	bic.w	r2, r2, #4
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]
      break;
 8004ca8:	e023      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa8b 	bl	80051cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	61da      	str	r2, [r3, #28]
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0b4      	b.n	8004e8a <HAL_TIM_ConfigClockSource+0x186>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	d03e      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5e:	f200 8087 	bhi.w	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	f000 8086 	beq.w	8004e76 <HAL_TIM_ConfigClockSource+0x172>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	d87f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d01a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xa6>
 8004d74:	2b70      	cmp	r3, #112	; 0x70
 8004d76:	d87b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d050      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x11a>
 8004d7c:	2b60      	cmp	r3, #96	; 0x60
 8004d7e:	d877      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b50      	cmp	r3, #80	; 0x50
 8004d82:	d03c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xfa>
 8004d84:	2b50      	cmp	r3, #80	; 0x50
 8004d86:	d873      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d058      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x13a>
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d86f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d064      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d86b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d060      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d867      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d05c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d05a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	e062      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f000 facc 	bl	8005356 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
      break;
 8004dd6:	e04f      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f000 fab5 	bl	8005356 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfa:	609a      	str	r2, [r3, #8]
      break;
 8004dfc:	e03c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 fa2c 	bl	8005268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2150      	movs	r1, #80	; 0x50
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fa83 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e02c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fa4a 	bl	80052c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2160      	movs	r1, #96	; 0x60
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa73 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e01c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 fa0c 	bl	8005268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa63 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e00c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fa5a 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004e6e:	e003      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <TIM_Base_SetConfig+0xb8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_Base_SetConfig+0x30>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <TIM_Base_SetConfig+0xbc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0x30>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <TIM_Base_SetConfig+0xc0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d108      	bne.n	8004ed6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <TIM_Base_SetConfig+0xb8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_Base_SetConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d007      	beq.n	8004ef6 <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <TIM_Base_SetConfig+0xbc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0x62>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <TIM_Base_SetConfig+0xc0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d108      	bne.n	8004f08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <TIM_Base_SetConfig+0xb8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	615a      	str	r2, [r3, #20]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800

08004f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f023 0201 	bic.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0302 	bic.w	r3, r3, #2
 8004fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <TIM_OC1_SetConfig+0xc8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10c      	bne.n	8004fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0308 	bic.w	r3, r3, #8
 8004fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <TIM_OC1_SetConfig+0xc8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00

08005024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0210 	bic.w	r2, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <TIM_OC2_SetConfig+0xd0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <TIM_OC2_SetConfig+0xd0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d113      	bne.n	80050d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00

080050f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_OC3_SetConfig+0xd0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10d      	bne.n	8005172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800515c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a14      	ldr	r2, [pc, #80]	; (80051c8 <TIM_OC3_SetConfig+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d113      	bne.n	80051a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00

080051cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0f      	ldr	r2, [pc, #60]	; (8005264 <TIM_OC4_SetConfig+0x98>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d109      	bne.n	8005240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00

08005268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0201 	bic.w	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 030a 	bic.w	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	031b      	lsls	r3, r3, #12
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	f043 0307 	orr.w	r3, r3, #7
 8005344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005370:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	021a      	lsls	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	431a      	orrs	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	609a      	str	r2, [r3, #8]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2201      	movs	r2, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e046      	b.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d009      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a10      	ldr	r2, [pc, #64]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10c      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4313      	orrs	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800

08005498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e03d      	b.n	8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e042      	b.n	80055d2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fc fdaf 	bl	80020c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f91c 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	; 0x28
 80055de:	af02      	add	r7, sp, #8
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d16d      	bne.n	80056d6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_UART_Transmit+0x2c>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e066      	b.n	80056d8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2221      	movs	r2, #33	; 0x21
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005618:	f7fc ff12 	bl	8002440 <HAL_GetTick>
 800561c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d108      	bne.n	8005646 <HAL_UART_Transmit+0x6c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e003      	b.n	800564e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800564e:	e02a      	b.n	80056a6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f840 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e036      	b.n	80056d8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800567e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	3302      	adds	r3, #2
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e007      	b.n	8005698 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1cf      	bne.n	8005650 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f810 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b090      	sub	sp, #64	; 0x40
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	e050      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d04c      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0x30>
 8005700:	f7fc fe9e 	bl	8002440 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570c:	429a      	cmp	r2, r3
 800570e:	d241      	bcs.n	8005794 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005730:	637a      	str	r2, [r7, #52]	; 0x34
 8005732:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3314      	adds	r3, #20
 800574a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3314      	adds	r3, #20
 8005762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005764:	623a      	str	r2, [r7, #32]
 8005766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	61bb      	str	r3, [r7, #24]
   return(result);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e5      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e00f      	b.n	80057b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d09f      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3740      	adds	r7, #64	; 0x40
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057f6:	f023 030c 	bic.w	r3, r3, #12
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	430b      	orrs	r3, r1
 8005802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <UART_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d103      	bne.n	800582c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fe f93c 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	e002      	b.n	8005832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe f924 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <UART_SetConfig+0x118>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	0119      	lsls	r1, r3, #4
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	fbb2 f2f3 	udiv	r2, r2, r3
 8005868:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <UART_SetConfig+0x118>)
 800586a:	fba3 0302 	umull	r0, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2064      	movs	r0, #100	; 0x64
 8005872:	fb00 f303 	mul.w	r3, r0, r3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	3332      	adds	r3, #50	; 0x32
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <UART_SetConfig+0x118>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005888:	4419      	add	r1, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009a      	lsls	r2, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <UART_SetConfig+0x118>)
 80058a2:	fba3 0302 	umull	r0, r3, r3, r2
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	2064      	movs	r0, #100	; 0x64
 80058aa:	fb00 f303 	mul.w	r3, r0, r3
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	3332      	adds	r3, #50	; 0x32
 80058b4:	4a07      	ldr	r2, [pc, #28]	; (80058d4 <UART_SetConfig+0x118>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	440a      	add	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40013800 	.word	0x40013800
 80058d4:	51eb851f 	.word	0x51eb851f

080058d8 <__errno>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	; (80058e0 <__errno+0x8>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	2000000c 	.word	0x2000000c

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	2600      	movs	r6, #0
 80058e8:	4d0c      	ldr	r5, [pc, #48]	; (800591c <__libc_init_array+0x38>)
 80058ea:	4c0d      	ldr	r4, [pc, #52]	; (8005920 <__libc_init_array+0x3c>)
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	42a6      	cmp	r6, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	f001 f88c 	bl	8006a10 <_init>
 80058f8:	2600      	movs	r6, #0
 80058fa:	4d0a      	ldr	r5, [pc, #40]	; (8005924 <__libc_init_array+0x40>)
 80058fc:	4c0a      	ldr	r4, [pc, #40]	; (8005928 <__libc_init_array+0x44>)
 80058fe:	1b64      	subs	r4, r4, r5
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	42a6      	cmp	r6, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	3601      	adds	r6, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	4798      	blx	r3
 8005918:	3601      	adds	r6, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	0800727c 	.word	0x0800727c
 8005920:	0800727c 	.word	0x0800727c
 8005924:	0800727c 	.word	0x0800727c
 8005928:	08007280 	.word	0x08007280

0800592c <memset>:
 800592c:	4603      	mov	r3, r0
 800592e:	4402      	add	r2, r0
 8005930:	4293      	cmp	r3, r2
 8005932:	d100      	bne.n	8005936 <memset+0xa>
 8005934:	4770      	bx	lr
 8005936:	f803 1b01 	strb.w	r1, [r3], #1
 800593a:	e7f9      	b.n	8005930 <memset+0x4>

0800593c <iprintf>:
 800593c:	b40f      	push	{r0, r1, r2, r3}
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <iprintf+0x2c>)
 8005940:	b513      	push	{r0, r1, r4, lr}
 8005942:	681c      	ldr	r4, [r3, #0]
 8005944:	b124      	cbz	r4, 8005950 <iprintf+0x14>
 8005946:	69a3      	ldr	r3, [r4, #24]
 8005948:	b913      	cbnz	r3, 8005950 <iprintf+0x14>
 800594a:	4620      	mov	r0, r4
 800594c:	f000 f9f2 	bl	8005d34 <__sinit>
 8005950:	ab05      	add	r3, sp, #20
 8005952:	4620      	mov	r0, r4
 8005954:	9a04      	ldr	r2, [sp, #16]
 8005956:	68a1      	ldr	r1, [r4, #8]
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f000 fbfd 	bl	8006158 <_vfiprintf_r>
 800595e:	b002      	add	sp, #8
 8005960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005964:	b004      	add	sp, #16
 8005966:	4770      	bx	lr
 8005968:	2000000c 	.word	0x2000000c

0800596c <setbuf>:
 800596c:	2900      	cmp	r1, #0
 800596e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005972:	bf0c      	ite	eq
 8005974:	2202      	moveq	r2, #2
 8005976:	2200      	movne	r2, #0
 8005978:	f000 b800 	b.w	800597c <setvbuf>

0800597c <setvbuf>:
 800597c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005980:	461d      	mov	r5, r3
 8005982:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <setvbuf+0x17c>)
 8005984:	4604      	mov	r4, r0
 8005986:	681f      	ldr	r7, [r3, #0]
 8005988:	460e      	mov	r6, r1
 800598a:	4690      	mov	r8, r2
 800598c:	b127      	cbz	r7, 8005998 <setvbuf+0x1c>
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	b913      	cbnz	r3, 8005998 <setvbuf+0x1c>
 8005992:	4638      	mov	r0, r7
 8005994:	f000 f9ce 	bl	8005d34 <__sinit>
 8005998:	4b58      	ldr	r3, [pc, #352]	; (8005afc <setvbuf+0x180>)
 800599a:	429c      	cmp	r4, r3
 800599c:	d167      	bne.n	8005a6e <setvbuf+0xf2>
 800599e:	687c      	ldr	r4, [r7, #4]
 80059a0:	f1b8 0f02 	cmp.w	r8, #2
 80059a4:	d006      	beq.n	80059b4 <setvbuf+0x38>
 80059a6:	f1b8 0f01 	cmp.w	r8, #1
 80059aa:	f200 809f 	bhi.w	8005aec <setvbuf+0x170>
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	f2c0 809c 	blt.w	8005aec <setvbuf+0x170>
 80059b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b6:	07db      	lsls	r3, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <setvbuf+0x4a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	0598      	lsls	r0, r3, #22
 80059be:	d402      	bmi.n	80059c6 <setvbuf+0x4a>
 80059c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c2:	f000 fa55 	bl	8005e70 <__retarget_lock_acquire_recursive>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4638      	mov	r0, r7
 80059ca:	f000 f91f 	bl	8005c0c <_fflush_r>
 80059ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d0:	b141      	cbz	r1, 80059e4 <setvbuf+0x68>
 80059d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059d6:	4299      	cmp	r1, r3
 80059d8:	d002      	beq.n	80059e0 <setvbuf+0x64>
 80059da:	4638      	mov	r0, r7
 80059dc:	f000 fab8 	bl	8005f50 <_free_r>
 80059e0:	2300      	movs	r3, #0
 80059e2:	6363      	str	r3, [r4, #52]	; 0x34
 80059e4:	2300      	movs	r3, #0
 80059e6:	61a3      	str	r3, [r4, #24]
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	0619      	lsls	r1, r3, #24
 80059ee:	d503      	bpl.n	80059f8 <setvbuf+0x7c>
 80059f0:	4638      	mov	r0, r7
 80059f2:	6921      	ldr	r1, [r4, #16]
 80059f4:	f000 faac 	bl	8005f50 <_free_r>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f1b8 0f02 	cmp.w	r8, #2
 80059fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	d06c      	beq.n	8005ae4 <setvbuf+0x168>
 8005a0a:	ab01      	add	r3, sp, #4
 8005a0c:	466a      	mov	r2, sp
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4638      	mov	r0, r7
 8005a12:	f000 fa2f 	bl	8005e74 <__swhatbuf_r>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	4318      	orrs	r0, r3
 8005a1a:	81a0      	strh	r0, [r4, #12]
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	d130      	bne.n	8005a82 <setvbuf+0x106>
 8005a20:	9d00      	ldr	r5, [sp, #0]
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 fa8c 	bl	8005f40 <malloc>
 8005a28:	4606      	mov	r6, r0
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d155      	bne.n	8005ada <setvbuf+0x15e>
 8005a2e:	f8dd 9000 	ldr.w	r9, [sp]
 8005a32:	45a9      	cmp	r9, r5
 8005a34:	d14a      	bne.n	8005acc <setvbuf+0x150>
 8005a36:	f04f 35ff 	mov.w	r5, #4294967295
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60a2      	str	r2, [r4, #8]
 8005a3e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005a42:	6022      	str	r2, [r4, #0]
 8005a44:	6122      	str	r2, [r4, #16]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a4c:	6162      	str	r2, [r4, #20]
 8005a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	07d2      	lsls	r2, r2, #31
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	d405      	bmi.n	8005a66 <setvbuf+0xea>
 8005a5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a5e:	d102      	bne.n	8005a66 <setvbuf+0xea>
 8005a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a62:	f000 fa06 	bl	8005e72 <__retarget_lock_release_recursive>
 8005a66:	4628      	mov	r0, r5
 8005a68:	b003      	add	sp, #12
 8005a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <setvbuf+0x184>)
 8005a70:	429c      	cmp	r4, r3
 8005a72:	d101      	bne.n	8005a78 <setvbuf+0xfc>
 8005a74:	68bc      	ldr	r4, [r7, #8]
 8005a76:	e793      	b.n	80059a0 <setvbuf+0x24>
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <setvbuf+0x188>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	bf08      	it	eq
 8005a7e:	68fc      	ldreq	r4, [r7, #12]
 8005a80:	e78e      	b.n	80059a0 <setvbuf+0x24>
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d0cd      	beq.n	8005a22 <setvbuf+0xa6>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	b913      	cbnz	r3, 8005a90 <setvbuf+0x114>
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f000 f952 	bl	8005d34 <__sinit>
 8005a90:	f1b8 0f01 	cmp.w	r8, #1
 8005a94:	bf08      	it	eq
 8005a96:	89a3      	ldrheq	r3, [r4, #12]
 8005a98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005a9c:	bf04      	itt	eq
 8005a9e:	f043 0301 	orreq.w	r3, r3, #1
 8005aa2:	81a3      	strheq	r3, [r4, #12]
 8005aa4:	89a2      	ldrh	r2, [r4, #12]
 8005aa6:	6026      	str	r6, [r4, #0]
 8005aa8:	f012 0308 	ands.w	r3, r2, #8
 8005aac:	d01c      	beq.n	8005ae8 <setvbuf+0x16c>
 8005aae:	07d3      	lsls	r3, r2, #31
 8005ab0:	bf41      	itttt	mi
 8005ab2:	2300      	movmi	r3, #0
 8005ab4:	426d      	negmi	r5, r5
 8005ab6:	60a3      	strmi	r3, [r4, #8]
 8005ab8:	61a5      	strmi	r5, [r4, #24]
 8005aba:	bf58      	it	pl
 8005abc:	60a5      	strpl	r5, [r4, #8]
 8005abe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005ac0:	f015 0501 	ands.w	r5, r5, #1
 8005ac4:	d115      	bne.n	8005af2 <setvbuf+0x176>
 8005ac6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005aca:	e7c8      	b.n	8005a5e <setvbuf+0xe2>
 8005acc:	4648      	mov	r0, r9
 8005ace:	f000 fa37 	bl	8005f40 <malloc>
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d0ae      	beq.n	8005a36 <setvbuf+0xba>
 8005ad8:	464d      	mov	r5, r9
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae0:	81a3      	strh	r3, [r4, #12]
 8005ae2:	e7d0      	b.n	8005a86 <setvbuf+0x10a>
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	e7a8      	b.n	8005a3a <setvbuf+0xbe>
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	e7e8      	b.n	8005abe <setvbuf+0x142>
 8005aec:	f04f 35ff 	mov.w	r5, #4294967295
 8005af0:	e7b9      	b.n	8005a66 <setvbuf+0xea>
 8005af2:	2500      	movs	r5, #0
 8005af4:	e7b7      	b.n	8005a66 <setvbuf+0xea>
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c
 8005afc:	08007208 	.word	0x08007208
 8005b00:	08007228 	.word	0x08007228
 8005b04:	080071e8 	.word	0x080071e8

08005b08 <__sflush_r>:
 8005b08:	898a      	ldrh	r2, [r1, #12]
 8005b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	0710      	lsls	r0, r2, #28
 8005b10:	460c      	mov	r4, r1
 8005b12:	d457      	bmi.n	8005bc4 <__sflush_r+0xbc>
 8005b14:	684b      	ldr	r3, [r1, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc04      	bgt.n	8005b24 <__sflush_r+0x1c>
 8005b1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc01      	bgt.n	8005b24 <__sflush_r+0x1c>
 8005b20:	2000      	movs	r0, #0
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	d0fa      	beq.n	8005b20 <__sflush_r+0x18>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b30:	682f      	ldr	r7, [r5, #0]
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	d032      	beq.n	8005b9c <__sflush_r+0x94>
 8005b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	075a      	lsls	r2, r3, #29
 8005b3c:	d505      	bpl.n	8005b4a <__sflush_r+0x42>
 8005b3e:	6863      	ldr	r3, [r4, #4]
 8005b40:	1ac0      	subs	r0, r0, r3
 8005b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b44:	b10b      	cbz	r3, 8005b4a <__sflush_r+0x42>
 8005b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b48:	1ac0      	subs	r0, r0, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b50:	4628      	mov	r0, r5
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	47b0      	blx	r6
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	d106      	bne.n	8005b6a <__sflush_r+0x62>
 8005b5c:	6829      	ldr	r1, [r5, #0]
 8005b5e:	291d      	cmp	r1, #29
 8005b60:	d82c      	bhi.n	8005bbc <__sflush_r+0xb4>
 8005b62:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <__sflush_r+0x100>)
 8005b64:	40ca      	lsrs	r2, r1
 8005b66:	07d6      	lsls	r6, r2, #31
 8005b68:	d528      	bpl.n	8005bbc <__sflush_r+0xb4>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	6062      	str	r2, [r4, #4]
 8005b6e:	6922      	ldr	r2, [r4, #16]
 8005b70:	04d9      	lsls	r1, r3, #19
 8005b72:	6022      	str	r2, [r4, #0]
 8005b74:	d504      	bpl.n	8005b80 <__sflush_r+0x78>
 8005b76:	1c42      	adds	r2, r0, #1
 8005b78:	d101      	bne.n	8005b7e <__sflush_r+0x76>
 8005b7a:	682b      	ldr	r3, [r5, #0]
 8005b7c:	b903      	cbnz	r3, 8005b80 <__sflush_r+0x78>
 8005b7e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b82:	602f      	str	r7, [r5, #0]
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d0cb      	beq.n	8005b20 <__sflush_r+0x18>
 8005b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d002      	beq.n	8005b96 <__sflush_r+0x8e>
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 f9dd 	bl	8005f50 <_free_r>
 8005b96:	2000      	movs	r0, #0
 8005b98:	6360      	str	r0, [r4, #52]	; 0x34
 8005b9a:	e7c2      	b.n	8005b22 <__sflush_r+0x1a>
 8005b9c:	6a21      	ldr	r1, [r4, #32]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b0      	blx	r6
 8005ba4:	1c41      	adds	r1, r0, #1
 8005ba6:	d1c7      	bne.n	8005b38 <__sflush_r+0x30>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0c4      	beq.n	8005b38 <__sflush_r+0x30>
 8005bae:	2b1d      	cmp	r3, #29
 8005bb0:	d001      	beq.n	8005bb6 <__sflush_r+0xae>
 8005bb2:	2b16      	cmp	r3, #22
 8005bb4:	d101      	bne.n	8005bba <__sflush_r+0xb2>
 8005bb6:	602f      	str	r7, [r5, #0]
 8005bb8:	e7b2      	b.n	8005b20 <__sflush_r+0x18>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	e7ae      	b.n	8005b22 <__sflush_r+0x1a>
 8005bc4:	690f      	ldr	r7, [r1, #16]
 8005bc6:	2f00      	cmp	r7, #0
 8005bc8:	d0aa      	beq.n	8005b20 <__sflush_r+0x18>
 8005bca:	0793      	lsls	r3, r2, #30
 8005bcc:	bf18      	it	ne
 8005bce:	2300      	movne	r3, #0
 8005bd0:	680e      	ldr	r6, [r1, #0]
 8005bd2:	bf08      	it	eq
 8005bd4:	694b      	ldreq	r3, [r1, #20]
 8005bd6:	1bf6      	subs	r6, r6, r7
 8005bd8:	600f      	str	r7, [r1, #0]
 8005bda:	608b      	str	r3, [r1, #8]
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	dd9f      	ble.n	8005b20 <__sflush_r+0x18>
 8005be0:	4633      	mov	r3, r6
 8005be2:	463a      	mov	r2, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	6a21      	ldr	r1, [r4, #32]
 8005be8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005bec:	47e0      	blx	ip
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	dc06      	bgt.n	8005c00 <__sflush_r+0xf8>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	e790      	b.n	8005b22 <__sflush_r+0x1a>
 8005c00:	4407      	add	r7, r0
 8005c02:	1a36      	subs	r6, r6, r0
 8005c04:	e7ea      	b.n	8005bdc <__sflush_r+0xd4>
 8005c06:	bf00      	nop
 8005c08:	20400001 	.word	0x20400001

08005c0c <_fflush_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	4605      	mov	r5, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b913      	cbnz	r3, 8005c1c <_fflush_r+0x10>
 8005c16:	2500      	movs	r5, #0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	b118      	cbz	r0, 8005c26 <_fflush_r+0x1a>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <_fflush_r+0x1a>
 8005c22:	f000 f887 	bl	8005d34 <__sinit>
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <_fflush_r+0x6c>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d11b      	bne.n	8005c64 <_fflush_r+0x58>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <_fflush_r+0xa>
 8005c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c38:	07d0      	lsls	r0, r2, #31
 8005c3a:	d404      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c3c:	0599      	lsls	r1, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f000 f915 	bl	8005e70 <__retarget_lock_acquire_recursive>
 8005c46:	4628      	mov	r0, r5
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7ff ff5d 	bl	8005b08 <__sflush_r>
 8005c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c50:	4605      	mov	r5, r0
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d4e0      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	d4dd      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f000 f908 	bl	8005e72 <__retarget_lock_release_recursive>
 8005c62:	e7d9      	b.n	8005c18 <_fflush_r+0xc>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x70>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <_fflush_r+0x62>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7df      	b.n	8005c2e <_fflush_r+0x22>
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <_fflush_r+0x74>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7da      	b.n	8005c2e <_fflush_r+0x22>
 8005c78:	08007208 	.word	0x08007208
 8005c7c:	08007228 	.word	0x08007228
 8005c80:	080071e8 	.word	0x080071e8

08005c84 <std>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c92:	6083      	str	r3, [r0, #8]
 8005c94:	8181      	strh	r1, [r0, #12]
 8005c96:	6643      	str	r3, [r0, #100]	; 0x64
 8005c98:	81c2      	strh	r2, [r0, #14]
 8005c9a:	6183      	str	r3, [r0, #24]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	305c      	adds	r0, #92	; 0x5c
 8005ca2:	f7ff fe43 	bl	800592c <memset>
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x38>)
 8005ca8:	6224      	str	r4, [r4, #32]
 8005caa:	6263      	str	r3, [r4, #36]	; 0x24
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <std+0x3c>)
 8005cae:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <std+0x40>)
 8005cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <std+0x44>)
 8005cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08006705 	.word	0x08006705
 8005cc0:	08006727 	.word	0x08006727
 8005cc4:	0800675f 	.word	0x0800675f
 8005cc8:	08006783 	.word	0x08006783

08005ccc <_cleanup_r>:
 8005ccc:	4901      	ldr	r1, [pc, #4]	; (8005cd4 <_cleanup_r+0x8>)
 8005cce:	f000 b8af 	b.w	8005e30 <_fwalk_reent>
 8005cd2:	bf00      	nop
 8005cd4:	08005c0d 	.word	0x08005c0d

08005cd8 <__sfmoreglue>:
 8005cd8:	2268      	movs	r2, #104	; 0x68
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	1e4d      	subs	r5, r1, #1
 8005cde:	4355      	muls	r5, r2
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce6:	f000 f99b 	bl	8006020 <_malloc_r>
 8005cea:	4604      	mov	r4, r0
 8005cec:	b140      	cbz	r0, 8005d00 <__sfmoreglue+0x28>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	60a0      	str	r0, [r4, #8]
 8005cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cfc:	f7ff fe16 	bl	800592c <memset>
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}

08005d04 <__sfp_lock_acquire>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__sfp_lock_acquire+0x8>)
 8005d06:	f000 b8b3 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20000231 	.word	0x20000231

08005d10 <__sfp_lock_release>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__sfp_lock_release+0x8>)
 8005d12:	f000 b8ae 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	20000231 	.word	0x20000231

08005d1c <__sinit_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sinit_lock_acquire+0x8>)
 8005d1e:	f000 b8a7 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	20000232 	.word	0x20000232

08005d28 <__sinit_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sinit_lock_release+0x8>)
 8005d2a:	f000 b8a2 	b.w	8005e72 <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000232 	.word	0x20000232

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sinit_lock_acquire>
 8005d3c:	69a3      	ldr	r3, [r4, #24]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sinit_lock_release>
 8005d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <__sinit+0x68>)
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <__sinit+0x6c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	bf08      	it	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bf08      	it	eq
 8005d60:	61a3      	streq	r3, [r4, #24]
 8005d62:	f000 f81f 	bl	8005da4 <__sfp>
 8005d66:	6060      	str	r0, [r4, #4]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 f81b 	bl	8005da4 <__sfp>
 8005d6e:	60a0      	str	r0, [r4, #8]
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 f817 	bl	8005da4 <__sfp>
 8005d76:	2200      	movs	r2, #0
 8005d78:	2104      	movs	r1, #4
 8005d7a:	60e0      	str	r0, [r4, #12]
 8005d7c:	6860      	ldr	r0, [r4, #4]
 8005d7e:	f7ff ff81 	bl	8005c84 <std>
 8005d82:	2201      	movs	r2, #1
 8005d84:	2109      	movs	r1, #9
 8005d86:	68a0      	ldr	r0, [r4, #8]
 8005d88:	f7ff ff7c 	bl	8005c84 <std>
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	2112      	movs	r1, #18
 8005d90:	68e0      	ldr	r0, [r4, #12]
 8005d92:	f7ff ff77 	bl	8005c84 <std>
 8005d96:	2301      	movs	r3, #1
 8005d98:	61a3      	str	r3, [r4, #24]
 8005d9a:	e7d1      	b.n	8005d40 <__sinit+0xc>
 8005d9c:	080071e4 	.word	0x080071e4
 8005da0:	08005ccd 	.word	0x08005ccd

08005da4 <__sfp>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4607      	mov	r7, r0
 8005da8:	f7ff ffac 	bl	8005d04 <__sfp_lock_acquire>
 8005dac:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <__sfp+0x84>)
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	69b3      	ldr	r3, [r6, #24]
 8005db2:	b913      	cbnz	r3, 8005dba <__sfp+0x16>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ffbd 	bl	8005d34 <__sinit>
 8005dba:	3648      	adds	r6, #72	; 0x48
 8005dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	d503      	bpl.n	8005dcc <__sfp+0x28>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	b30b      	cbz	r3, 8005e0c <__sfp+0x68>
 8005dc8:	6836      	ldr	r6, [r6, #0]
 8005dca:	e7f7      	b.n	8005dbc <__sfp+0x18>
 8005dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dd0:	b9d5      	cbnz	r5, 8005e08 <__sfp+0x64>
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <__sfp+0x88>)
 8005dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dd8:	60e3      	str	r3, [r4, #12]
 8005dda:	6665      	str	r5, [r4, #100]	; 0x64
 8005ddc:	f000 f847 	bl	8005e6e <__retarget_lock_init_recursive>
 8005de0:	f7ff ff96 	bl	8005d10 <__sfp_lock_release>
 8005de4:	2208      	movs	r2, #8
 8005de6:	4629      	mov	r1, r5
 8005de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005df0:	6025      	str	r5, [r4, #0]
 8005df2:	61a5      	str	r5, [r4, #24]
 8005df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df8:	f7ff fd98 	bl	800592c <memset>
 8005dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e04:	4620      	mov	r0, r4
 8005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e08:	3468      	adds	r4, #104	; 0x68
 8005e0a:	e7d9      	b.n	8005dc0 <__sfp+0x1c>
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff62 	bl	8005cd8 <__sfmoreglue>
 8005e14:	4604      	mov	r4, r0
 8005e16:	6030      	str	r0, [r6, #0]
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1d5      	bne.n	8005dc8 <__sfp+0x24>
 8005e1c:	f7ff ff78 	bl	8005d10 <__sfp_lock_release>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	e7ee      	b.n	8005e04 <__sfp+0x60>
 8005e26:	bf00      	nop
 8005e28:	080071e4 	.word	0x080071e4
 8005e2c:	ffff0001 	.word	0xffff0001

08005e30 <_fwalk_reent>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	2700      	movs	r7, #0
 8005e3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e42:	f1b9 0901 	subs.w	r9, r9, #1
 8005e46:	d505      	bpl.n	8005e54 <_fwalk_reent+0x24>
 8005e48:	6824      	ldr	r4, [r4, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f7      	bne.n	8005e3e <_fwalk_reent+0xe>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d907      	bls.n	8005e6a <_fwalk_reent+0x3a>
 8005e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d003      	beq.n	8005e6a <_fwalk_reent+0x3a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	4307      	orrs	r7, r0
 8005e6a:	3568      	adds	r5, #104	; 0x68
 8005e6c:	e7e9      	b.n	8005e42 <_fwalk_reent+0x12>

08005e6e <__retarget_lock_init_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__retarget_lock_acquire_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_release_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__swhatbuf_r>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	460e      	mov	r6, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	461d      	mov	r5, r3
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	da08      	bge.n	8005e98 <__swhatbuf_r+0x24>
 8005e86:	2200      	movs	r2, #0
 8005e88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	061a      	lsls	r2, r3, #24
 8005e90:	d410      	bmi.n	8005eb4 <__swhatbuf_r+0x40>
 8005e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e96:	e00e      	b.n	8005eb6 <__swhatbuf_r+0x42>
 8005e98:	466a      	mov	r2, sp
 8005e9a:	f000 fd59 	bl	8006950 <_fstat_r>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	dbf1      	blt.n	8005e86 <__swhatbuf_r+0x12>
 8005ea2:	9a01      	ldr	r2, [sp, #4]
 8005ea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eac:	425a      	negs	r2, r3
 8005eae:	415a      	adcs	r2, r3
 8005eb0:	602a      	str	r2, [r5, #0]
 8005eb2:	e7ee      	b.n	8005e92 <__swhatbuf_r+0x1e>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	b016      	add	sp, #88	; 0x58
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ec0 <__smakebuf_r>:
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec4:	079d      	lsls	r5, r3, #30
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	d507      	bpl.n	8005edc <__smakebuf_r+0x1c>
 8005ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	6163      	str	r3, [r4, #20]
 8005ed8:	b002      	add	sp, #8
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	466a      	mov	r2, sp
 8005ede:	ab01      	add	r3, sp, #4
 8005ee0:	f7ff ffc8 	bl	8005e74 <__swhatbuf_r>
 8005ee4:	9900      	ldr	r1, [sp, #0]
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f899 	bl	8006020 <_malloc_r>
 8005eee:	b948      	cbnz	r0, 8005f04 <__smakebuf_r+0x44>
 8005ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d4ef      	bmi.n	8005ed8 <__smakebuf_r+0x18>
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	e7e3      	b.n	8005ecc <__smakebuf_r+0xc>
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <__smakebuf_r+0x7c>)
 8005f06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	6120      	str	r0, [r4, #16]
 8005f16:	6163      	str	r3, [r4, #20]
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x74>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f22:	f000 fd27 	bl	8006974 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x74>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a0      	ldrh	r0, [r4, #12]
 8005f36:	4305      	orrs	r5, r0
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cd      	b.n	8005ed8 <__smakebuf_r+0x18>
 8005f3c:	08005ccd 	.word	0x08005ccd

08005f40 <malloc>:
 8005f40:	4b02      	ldr	r3, [pc, #8]	; (8005f4c <malloc+0xc>)
 8005f42:	4601      	mov	r1, r0
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f000 b86b 	b.w	8006020 <_malloc_r>
 8005f4a:	bf00      	nop
 8005f4c:	2000000c 	.word	0x2000000c

08005f50 <_free_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4605      	mov	r5, r0
 8005f54:	2900      	cmp	r1, #0
 8005f56:	d040      	beq.n	8005fda <_free_r+0x8a>
 8005f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f5c:	1f0c      	subs	r4, r1, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bfb8      	it	lt
 8005f62:	18e4      	addlt	r4, r4, r3
 8005f64:	f000 fd36 	bl	80069d4 <__malloc_lock>
 8005f68:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <_free_r+0x8c>)
 8005f6a:	6813      	ldr	r3, [r2, #0]
 8005f6c:	b933      	cbnz	r3, 8005f7c <_free_r+0x2c>
 8005f6e:	6063      	str	r3, [r4, #4]
 8005f70:	6014      	str	r4, [r2, #0]
 8005f72:	4628      	mov	r0, r5
 8005f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f78:	f000 bd32 	b.w	80069e0 <__malloc_unlock>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d908      	bls.n	8005f92 <_free_r+0x42>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	1821      	adds	r1, r4, r0
 8005f84:	428b      	cmp	r3, r1
 8005f86:	bf01      	itttt	eq
 8005f88:	6819      	ldreq	r1, [r3, #0]
 8005f8a:	685b      	ldreq	r3, [r3, #4]
 8005f8c:	1809      	addeq	r1, r1, r0
 8005f8e:	6021      	streq	r1, [r4, #0]
 8005f90:	e7ed      	b.n	8005f6e <_free_r+0x1e>
 8005f92:	461a      	mov	r2, r3
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b10b      	cbz	r3, 8005f9c <_free_r+0x4c>
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	d9fa      	bls.n	8005f92 <_free_r+0x42>
 8005f9c:	6811      	ldr	r1, [r2, #0]
 8005f9e:	1850      	adds	r0, r2, r1
 8005fa0:	42a0      	cmp	r0, r4
 8005fa2:	d10b      	bne.n	8005fbc <_free_r+0x6c>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	1850      	adds	r0, r2, r1
 8005faa:	4283      	cmp	r3, r0
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	d1e0      	bne.n	8005f72 <_free_r+0x22>
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4401      	add	r1, r0
 8005fb6:	6011      	str	r1, [r2, #0]
 8005fb8:	6053      	str	r3, [r2, #4]
 8005fba:	e7da      	b.n	8005f72 <_free_r+0x22>
 8005fbc:	d902      	bls.n	8005fc4 <_free_r+0x74>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	e7d6      	b.n	8005f72 <_free_r+0x22>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	1821      	adds	r1, r4, r0
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf01      	itttt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	1809      	addeq	r1, r1, r0
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6054      	str	r4, [r2, #4]
 8005fd8:	e7cb      	b.n	8005f72 <_free_r+0x22>
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	20000234 	.word	0x20000234

08005fe0 <sbrk_aligned>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4e0e      	ldr	r6, [pc, #56]	; (800601c <sbrk_aligned+0x3c>)
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	4605      	mov	r5, r0
 8005fea:	b911      	cbnz	r1, 8005ff2 <sbrk_aligned+0x12>
 8005fec:	f000 fb7a 	bl	80066e4 <_sbrk_r>
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fb75 	bl	80066e4 <_sbrk_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <sbrk_aligned+0x34>
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d007      	beq.n	8006018 <sbrk_aligned+0x38>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4628      	mov	r0, r5
 800600c:	f000 fb6a 	bl	80066e4 <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d101      	bne.n	8006018 <sbrk_aligned+0x38>
 8006014:	f04f 34ff 	mov.w	r4, #4294967295
 8006018:	4620      	mov	r0, r4
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	20000238 	.word	0x20000238

08006020 <_malloc_r>:
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	1ccd      	adds	r5, r1, #3
 8006026:	f025 0503 	bic.w	r5, r5, #3
 800602a:	3508      	adds	r5, #8
 800602c:	2d0c      	cmp	r5, #12
 800602e:	bf38      	it	cc
 8006030:	250c      	movcc	r5, #12
 8006032:	2d00      	cmp	r5, #0
 8006034:	4607      	mov	r7, r0
 8006036:	db01      	blt.n	800603c <_malloc_r+0x1c>
 8006038:	42a9      	cmp	r1, r5
 800603a:	d905      	bls.n	8006048 <_malloc_r+0x28>
 800603c:	230c      	movs	r3, #12
 800603e:	2600      	movs	r6, #0
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	4630      	mov	r0, r6
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	4e2e      	ldr	r6, [pc, #184]	; (8006104 <_malloc_r+0xe4>)
 800604a:	f000 fcc3 	bl	80069d4 <__malloc_lock>
 800604e:	6833      	ldr	r3, [r6, #0]
 8006050:	461c      	mov	r4, r3
 8006052:	bb34      	cbnz	r4, 80060a2 <_malloc_r+0x82>
 8006054:	4629      	mov	r1, r5
 8006056:	4638      	mov	r0, r7
 8006058:	f7ff ffc2 	bl	8005fe0 <sbrk_aligned>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	4604      	mov	r4, r0
 8006060:	d14d      	bne.n	80060fe <_malloc_r+0xde>
 8006062:	6834      	ldr	r4, [r6, #0]
 8006064:	4626      	mov	r6, r4
 8006066:	2e00      	cmp	r6, #0
 8006068:	d140      	bne.n	80060ec <_malloc_r+0xcc>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4631      	mov	r1, r6
 800606e:	4638      	mov	r0, r7
 8006070:	eb04 0803 	add.w	r8, r4, r3
 8006074:	f000 fb36 	bl	80066e4 <_sbrk_r>
 8006078:	4580      	cmp	r8, r0
 800607a:	d13a      	bne.n	80060f2 <_malloc_r+0xd2>
 800607c:	6821      	ldr	r1, [r4, #0]
 800607e:	3503      	adds	r5, #3
 8006080:	1a6d      	subs	r5, r5, r1
 8006082:	f025 0503 	bic.w	r5, r5, #3
 8006086:	3508      	adds	r5, #8
 8006088:	2d0c      	cmp	r5, #12
 800608a:	bf38      	it	cc
 800608c:	250c      	movcc	r5, #12
 800608e:	4638      	mov	r0, r7
 8006090:	4629      	mov	r1, r5
 8006092:	f7ff ffa5 	bl	8005fe0 <sbrk_aligned>
 8006096:	3001      	adds	r0, #1
 8006098:	d02b      	beq.n	80060f2 <_malloc_r+0xd2>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	442b      	add	r3, r5
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e00e      	b.n	80060c0 <_malloc_r+0xa0>
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	1b52      	subs	r2, r2, r5
 80060a6:	d41e      	bmi.n	80060e6 <_malloc_r+0xc6>
 80060a8:	2a0b      	cmp	r2, #11
 80060aa:	d916      	bls.n	80060da <_malloc_r+0xba>
 80060ac:	1961      	adds	r1, r4, r5
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6025      	str	r5, [r4, #0]
 80060b2:	bf18      	it	ne
 80060b4:	6059      	strne	r1, [r3, #4]
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	bf08      	it	eq
 80060ba:	6031      	streq	r1, [r6, #0]
 80060bc:	5162      	str	r2, [r4, r5]
 80060be:	604b      	str	r3, [r1, #4]
 80060c0:	4638      	mov	r0, r7
 80060c2:	f104 060b 	add.w	r6, r4, #11
 80060c6:	f000 fc8b 	bl	80069e0 <__malloc_unlock>
 80060ca:	f026 0607 	bic.w	r6, r6, #7
 80060ce:	1d23      	adds	r3, r4, #4
 80060d0:	1af2      	subs	r2, r6, r3
 80060d2:	d0b6      	beq.n	8006042 <_malloc_r+0x22>
 80060d4:	1b9b      	subs	r3, r3, r6
 80060d6:	50a3      	str	r3, [r4, r2]
 80060d8:	e7b3      	b.n	8006042 <_malloc_r+0x22>
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	bf0c      	ite	eq
 80060e0:	6032      	streq	r2, [r6, #0]
 80060e2:	605a      	strne	r2, [r3, #4]
 80060e4:	e7ec      	b.n	80060c0 <_malloc_r+0xa0>
 80060e6:	4623      	mov	r3, r4
 80060e8:	6864      	ldr	r4, [r4, #4]
 80060ea:	e7b2      	b.n	8006052 <_malloc_r+0x32>
 80060ec:	4634      	mov	r4, r6
 80060ee:	6876      	ldr	r6, [r6, #4]
 80060f0:	e7b9      	b.n	8006066 <_malloc_r+0x46>
 80060f2:	230c      	movs	r3, #12
 80060f4:	4638      	mov	r0, r7
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	f000 fc72 	bl	80069e0 <__malloc_unlock>
 80060fc:	e7a1      	b.n	8006042 <_malloc_r+0x22>
 80060fe:	6025      	str	r5, [r4, #0]
 8006100:	e7de      	b.n	80060c0 <_malloc_r+0xa0>
 8006102:	bf00      	nop
 8006104:	20000234 	.word	0x20000234

08006108 <__sfputc_r>:
 8006108:	6893      	ldr	r3, [r2, #8]
 800610a:	b410      	push	{r4}
 800610c:	3b01      	subs	r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	6093      	str	r3, [r2, #8]
 8006112:	da07      	bge.n	8006124 <__sfputc_r+0x1c>
 8006114:	6994      	ldr	r4, [r2, #24]
 8006116:	42a3      	cmp	r3, r4
 8006118:	db01      	blt.n	800611e <__sfputc_r+0x16>
 800611a:	290a      	cmp	r1, #10
 800611c:	d102      	bne.n	8006124 <__sfputc_r+0x1c>
 800611e:	bc10      	pop	{r4}
 8006120:	f000 bb34 	b.w	800678c <__swbuf_r>
 8006124:	6813      	ldr	r3, [r2, #0]
 8006126:	1c58      	adds	r0, r3, #1
 8006128:	6010      	str	r0, [r2, #0]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	4608      	mov	r0, r1
 800612e:	bc10      	pop	{r4}
 8006130:	4770      	bx	lr

08006132 <__sfputs_r>:
 8006132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	4614      	mov	r4, r2
 800613a:	18d5      	adds	r5, r2, r3
 800613c:	42ac      	cmp	r4, r5
 800613e:	d101      	bne.n	8006144 <__sfputs_r+0x12>
 8006140:	2000      	movs	r0, #0
 8006142:	e007      	b.n	8006154 <__sfputs_r+0x22>
 8006144:	463a      	mov	r2, r7
 8006146:	4630      	mov	r0, r6
 8006148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614c:	f7ff ffdc 	bl	8006108 <__sfputc_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d1f3      	bne.n	800613c <__sfputs_r+0xa>
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006158 <_vfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	460d      	mov	r5, r1
 800615e:	4614      	mov	r4, r2
 8006160:	4698      	mov	r8, r3
 8006162:	4606      	mov	r6, r0
 8006164:	b09d      	sub	sp, #116	; 0x74
 8006166:	b118      	cbz	r0, 8006170 <_vfiprintf_r+0x18>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_vfiprintf_r+0x18>
 800616c:	f7ff fde2 	bl	8005d34 <__sinit>
 8006170:	4b89      	ldr	r3, [pc, #548]	; (8006398 <_vfiprintf_r+0x240>)
 8006172:	429d      	cmp	r5, r3
 8006174:	d11b      	bne.n	80061ae <_vfiprintf_r+0x56>
 8006176:	6875      	ldr	r5, [r6, #4]
 8006178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d405      	bmi.n	800618a <_vfiprintf_r+0x32>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	059a      	lsls	r2, r3, #22
 8006182:	d402      	bmi.n	800618a <_vfiprintf_r+0x32>
 8006184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006186:	f7ff fe73 	bl	8005e70 <__retarget_lock_acquire_recursive>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	d501      	bpl.n	8006194 <_vfiprintf_r+0x3c>
 8006190:	692b      	ldr	r3, [r5, #16]
 8006192:	b9eb      	cbnz	r3, 80061d0 <_vfiprintf_r+0x78>
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fb5c 	bl	8006854 <__swsetup_r>
 800619c:	b1c0      	cbz	r0, 80061d0 <_vfiprintf_r+0x78>
 800619e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a0:	07dc      	lsls	r4, r3, #31
 80061a2:	d50e      	bpl.n	80061c2 <_vfiprintf_r+0x6a>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b01d      	add	sp, #116	; 0x74
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	4b7b      	ldr	r3, [pc, #492]	; (800639c <_vfiprintf_r+0x244>)
 80061b0:	429d      	cmp	r5, r3
 80061b2:	d101      	bne.n	80061b8 <_vfiprintf_r+0x60>
 80061b4:	68b5      	ldr	r5, [r6, #8]
 80061b6:	e7df      	b.n	8006178 <_vfiprintf_r+0x20>
 80061b8:	4b79      	ldr	r3, [pc, #484]	; (80063a0 <_vfiprintf_r+0x248>)
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf08      	it	eq
 80061be:	68f5      	ldreq	r5, [r6, #12]
 80061c0:	e7da      	b.n	8006178 <_vfiprintf_r+0x20>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	0598      	lsls	r0, r3, #22
 80061c6:	d4ed      	bmi.n	80061a4 <_vfiprintf_r+0x4c>
 80061c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ca:	f7ff fe52 	bl	8005e72 <__retarget_lock_release_recursive>
 80061ce:	e7e9      	b.n	80061a4 <_vfiprintf_r+0x4c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	2320      	movs	r3, #32
 80061d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061da:	2330      	movs	r3, #48	; 0x30
 80061dc:	f04f 0901 	mov.w	r9, #1
 80061e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80063a4 <_vfiprintf_r+0x24c>
 80061e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ec:	4623      	mov	r3, r4
 80061ee:	469a      	mov	sl, r3
 80061f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f4:	b10a      	cbz	r2, 80061fa <_vfiprintf_r+0xa2>
 80061f6:	2a25      	cmp	r2, #37	; 0x25
 80061f8:	d1f9      	bne.n	80061ee <_vfiprintf_r+0x96>
 80061fa:	ebba 0b04 	subs.w	fp, sl, r4
 80061fe:	d00b      	beq.n	8006218 <_vfiprintf_r+0xc0>
 8006200:	465b      	mov	r3, fp
 8006202:	4622      	mov	r2, r4
 8006204:	4629      	mov	r1, r5
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff ff93 	bl	8006132 <__sfputs_r>
 800620c:	3001      	adds	r0, #1
 800620e:	f000 80aa 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006214:	445a      	add	r2, fp
 8006216:	9209      	str	r2, [sp, #36]	; 0x24
 8006218:	f89a 3000 	ldrb.w	r3, [sl]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a2 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006222:	2300      	movs	r3, #0
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800622c:	f10a 0a01 	add.w	sl, sl, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	9307      	str	r3, [sp, #28]
 8006234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006238:	931a      	str	r3, [sp, #104]	; 0x68
 800623a:	4654      	mov	r4, sl
 800623c:	2205      	movs	r2, #5
 800623e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006242:	4858      	ldr	r0, [pc, #352]	; (80063a4 <_vfiprintf_r+0x24c>)
 8006244:	f000 fbb8 	bl	80069b8 <memchr>
 8006248:	9a04      	ldr	r2, [sp, #16]
 800624a:	b9d8      	cbnz	r0, 8006284 <_vfiprintf_r+0x12c>
 800624c:	06d1      	lsls	r1, r2, #27
 800624e:	bf44      	itt	mi
 8006250:	2320      	movmi	r3, #32
 8006252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006256:	0713      	lsls	r3, r2, #28
 8006258:	bf44      	itt	mi
 800625a:	232b      	movmi	r3, #43	; 0x2b
 800625c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006260:	f89a 3000 	ldrb.w	r3, [sl]
 8006264:	2b2a      	cmp	r3, #42	; 0x2a
 8006266:	d015      	beq.n	8006294 <_vfiprintf_r+0x13c>
 8006268:	4654      	mov	r4, sl
 800626a:	2000      	movs	r0, #0
 800626c:	f04f 0c0a 	mov.w	ip, #10
 8006270:	9a07      	ldr	r2, [sp, #28]
 8006272:	4621      	mov	r1, r4
 8006274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006278:	3b30      	subs	r3, #48	; 0x30
 800627a:	2b09      	cmp	r3, #9
 800627c:	d94e      	bls.n	800631c <_vfiprintf_r+0x1c4>
 800627e:	b1b0      	cbz	r0, 80062ae <_vfiprintf_r+0x156>
 8006280:	9207      	str	r2, [sp, #28]
 8006282:	e014      	b.n	80062ae <_vfiprintf_r+0x156>
 8006284:	eba0 0308 	sub.w	r3, r0, r8
 8006288:	fa09 f303 	lsl.w	r3, r9, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	46a2      	mov	sl, r4
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	e7d2      	b.n	800623a <_vfiprintf_r+0xe2>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	1d19      	adds	r1, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	9103      	str	r1, [sp, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfbb      	ittet	lt
 80062a0:	425b      	neglt	r3, r3
 80062a2:	f042 0202 	orrlt.w	r2, r2, #2
 80062a6:	9307      	strge	r3, [sp, #28]
 80062a8:	9307      	strlt	r3, [sp, #28]
 80062aa:	bfb8      	it	lt
 80062ac:	9204      	strlt	r2, [sp, #16]
 80062ae:	7823      	ldrb	r3, [r4, #0]
 80062b0:	2b2e      	cmp	r3, #46	; 0x2e
 80062b2:	d10c      	bne.n	80062ce <_vfiprintf_r+0x176>
 80062b4:	7863      	ldrb	r3, [r4, #1]
 80062b6:	2b2a      	cmp	r3, #42	; 0x2a
 80062b8:	d135      	bne.n	8006326 <_vfiprintf_r+0x1ce>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	3402      	adds	r4, #2
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	9203      	str	r2, [sp, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bfb8      	it	lt
 80062c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80063a8 <_vfiprintf_r+0x250>
 80062d2:	2203      	movs	r2, #3
 80062d4:	4650      	mov	r0, sl
 80062d6:	7821      	ldrb	r1, [r4, #0]
 80062d8:	f000 fb6e 	bl	80069b8 <memchr>
 80062dc:	b140      	cbz	r0, 80062f0 <_vfiprintf_r+0x198>
 80062de:	2340      	movs	r3, #64	; 0x40
 80062e0:	eba0 000a 	sub.w	r0, r0, sl
 80062e4:	fa03 f000 	lsl.w	r0, r3, r0
 80062e8:	9b04      	ldr	r3, [sp, #16]
 80062ea:	3401      	adds	r4, #1
 80062ec:	4303      	orrs	r3, r0
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	2206      	movs	r2, #6
 80062f6:	482d      	ldr	r0, [pc, #180]	; (80063ac <_vfiprintf_r+0x254>)
 80062f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fc:	f000 fb5c 	bl	80069b8 <memchr>
 8006300:	2800      	cmp	r0, #0
 8006302:	d03f      	beq.n	8006384 <_vfiprintf_r+0x22c>
 8006304:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <_vfiprintf_r+0x258>)
 8006306:	bb1b      	cbnz	r3, 8006350 <_vfiprintf_r+0x1f8>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	3307      	adds	r3, #7
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006316:	443b      	add	r3, r7
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	e767      	b.n	80061ec <_vfiprintf_r+0x94>
 800631c:	460c      	mov	r4, r1
 800631e:	2001      	movs	r0, #1
 8006320:	fb0c 3202 	mla	r2, ip, r2, r3
 8006324:	e7a5      	b.n	8006272 <_vfiprintf_r+0x11a>
 8006326:	2300      	movs	r3, #0
 8006328:	f04f 0c0a 	mov.w	ip, #10
 800632c:	4619      	mov	r1, r3
 800632e:	3401      	adds	r4, #1
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	4620      	mov	r0, r4
 8006334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006338:	3a30      	subs	r2, #48	; 0x30
 800633a:	2a09      	cmp	r2, #9
 800633c:	d903      	bls.n	8006346 <_vfiprintf_r+0x1ee>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c5      	beq.n	80062ce <_vfiprintf_r+0x176>
 8006342:	9105      	str	r1, [sp, #20]
 8006344:	e7c3      	b.n	80062ce <_vfiprintf_r+0x176>
 8006346:	4604      	mov	r4, r0
 8006348:	2301      	movs	r3, #1
 800634a:	fb0c 2101 	mla	r1, ip, r1, r2
 800634e:	e7f0      	b.n	8006332 <_vfiprintf_r+0x1da>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	462a      	mov	r2, r5
 8006356:	4630      	mov	r0, r6
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <_vfiprintf_r+0x25c>)
 800635a:	a904      	add	r1, sp, #16
 800635c:	f3af 8000 	nop.w
 8006360:	4607      	mov	r7, r0
 8006362:	1c78      	adds	r0, r7, #1
 8006364:	d1d6      	bne.n	8006314 <_vfiprintf_r+0x1bc>
 8006366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006368:	07d9      	lsls	r1, r3, #31
 800636a:	d405      	bmi.n	8006378 <_vfiprintf_r+0x220>
 800636c:	89ab      	ldrh	r3, [r5, #12]
 800636e:	059a      	lsls	r2, r3, #22
 8006370:	d402      	bmi.n	8006378 <_vfiprintf_r+0x220>
 8006372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006374:	f7ff fd7d 	bl	8005e72 <__retarget_lock_release_recursive>
 8006378:	89ab      	ldrh	r3, [r5, #12]
 800637a:	065b      	lsls	r3, r3, #25
 800637c:	f53f af12 	bmi.w	80061a4 <_vfiprintf_r+0x4c>
 8006380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006382:	e711      	b.n	80061a8 <_vfiprintf_r+0x50>
 8006384:	ab03      	add	r3, sp, #12
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	462a      	mov	r2, r5
 800638a:	4630      	mov	r0, r6
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <_vfiprintf_r+0x25c>)
 800638e:	a904      	add	r1, sp, #16
 8006390:	f000 f882 	bl	8006498 <_printf_i>
 8006394:	e7e4      	b.n	8006360 <_vfiprintf_r+0x208>
 8006396:	bf00      	nop
 8006398:	08007208 	.word	0x08007208
 800639c:	08007228 	.word	0x08007228
 80063a0:	080071e8 	.word	0x080071e8
 80063a4:	08007248 	.word	0x08007248
 80063a8:	0800724e 	.word	0x0800724e
 80063ac:	08007252 	.word	0x08007252
 80063b0:	00000000 	.word	0x00000000
 80063b4:	08006133 	.word	0x08006133

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4699      	mov	r9, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	4607      	mov	r7, r0
 80063c6:	4293      	cmp	r3, r2
 80063c8:	bfb8      	it	lt
 80063ca:	4613      	movlt	r3, r2
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d2:	460c      	mov	r4, r1
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc28      	bgt.n	8006452 <_printf_common+0x9a>
 8006400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006404:	1e13      	subs	r3, r2, #0
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d42d      	bmi.n	800646c <_printf_common+0xb4>
 8006410:	4649      	mov	r1, r9
 8006412:	4638      	mov	r0, r7
 8006414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d020      	beq.n	8006460 <_printf_common+0xa8>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	68e5      	ldr	r5, [r4, #12]
 8006422:	f003 0306 	and.w	r3, r3, #6
 8006426:	2b04      	cmp	r3, #4
 8006428:	bf18      	it	ne
 800642a:	2500      	movne	r5, #0
 800642c:	6832      	ldr	r2, [r6, #0]
 800642e:	f04f 0600 	mov.w	r6, #0
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	bf08      	it	eq
 8006436:	1aad      	subeq	r5, r5, r2
 8006438:	6922      	ldr	r2, [r4, #16]
 800643a:	bf08      	it	eq
 800643c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006440:	4293      	cmp	r3, r2
 8006442:	bfc4      	itt	gt
 8006444:	1a9b      	subgt	r3, r3, r2
 8006446:	18ed      	addgt	r5, r5, r3
 8006448:	341a      	adds	r4, #26
 800644a:	42b5      	cmp	r5, r6
 800644c:	d11a      	bne.n	8006484 <_printf_common+0xcc>
 800644e:	2000      	movs	r0, #0
 8006450:	e008      	b.n	8006464 <_printf_common+0xac>
 8006452:	2301      	movs	r3, #1
 8006454:	4652      	mov	r2, sl
 8006456:	4649      	mov	r1, r9
 8006458:	4638      	mov	r0, r7
 800645a:	47c0      	blx	r8
 800645c:	3001      	adds	r0, #1
 800645e:	d103      	bne.n	8006468 <_printf_common+0xb0>
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	3501      	adds	r5, #1
 800646a:	e7c4      	b.n	80063f6 <_printf_common+0x3e>
 800646c:	2030      	movs	r0, #48	; 0x30
 800646e:	18e1      	adds	r1, r4, r3
 8006470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800647a:	4422      	add	r2, r4
 800647c:	3302      	adds	r3, #2
 800647e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006482:	e7c5      	b.n	8006410 <_printf_common+0x58>
 8006484:	2301      	movs	r3, #1
 8006486:	4622      	mov	r2, r4
 8006488:	4649      	mov	r1, r9
 800648a:	4638      	mov	r0, r7
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d0e6      	beq.n	8006460 <_printf_common+0xa8>
 8006492:	3601      	adds	r6, #1
 8006494:	e7d9      	b.n	800644a <_printf_common+0x92>
	...

08006498 <_printf_i>:
 8006498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	7e0f      	ldrb	r7, [r1, #24]
 800649e:	4691      	mov	r9, r2
 80064a0:	2f78      	cmp	r7, #120	; 0x78
 80064a2:	4680      	mov	r8, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	469a      	mov	sl, r3
 80064a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ae:	d807      	bhi.n	80064c0 <_printf_i+0x28>
 80064b0:	2f62      	cmp	r7, #98	; 0x62
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x32>
 80064b4:	2f00      	cmp	r7, #0
 80064b6:	f000 80d9 	beq.w	800666c <_printf_i+0x1d4>
 80064ba:	2f58      	cmp	r7, #88	; 0x58
 80064bc:	f000 80a4 	beq.w	8006608 <_printf_i+0x170>
 80064c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c8:	e03a      	b.n	8006540 <_printf_i+0xa8>
 80064ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ce:	2b15      	cmp	r3, #21
 80064d0:	d8f6      	bhi.n	80064c0 <_printf_i+0x28>
 80064d2:	a101      	add	r1, pc, #4	; (adr r1, 80064d8 <_printf_i+0x40>)
 80064d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006545 	.word	0x08006545
 80064e0:	080064c1 	.word	0x080064c1
 80064e4:	080064c1 	.word	0x080064c1
 80064e8:	080064c1 	.word	0x080064c1
 80064ec:	080064c1 	.word	0x080064c1
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080064c1 	.word	0x080064c1
 80064f8:	080064c1 	.word	0x080064c1
 80064fc:	080064c1 	.word	0x080064c1
 8006500:	080064c1 	.word	0x080064c1
 8006504:	08006653 	.word	0x08006653
 8006508:	08006575 	.word	0x08006575
 800650c:	08006635 	.word	0x08006635
 8006510:	080064c1 	.word	0x080064c1
 8006514:	080064c1 	.word	0x080064c1
 8006518:	08006675 	.word	0x08006675
 800651c:	080064c1 	.word	0x080064c1
 8006520:	08006575 	.word	0x08006575
 8006524:	080064c1 	.word	0x080064c1
 8006528:	080064c1 	.word	0x080064c1
 800652c:	0800663d 	.word	0x0800663d
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006540:	2301      	movs	r3, #1
 8006542:	e0a4      	b.n	800668e <_printf_i+0x1f6>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	6829      	ldr	r1, [r5, #0]
 8006548:	0606      	lsls	r6, r0, #24
 800654a:	f101 0304 	add.w	r3, r1, #4
 800654e:	d50a      	bpl.n	8006566 <_printf_i+0xce>
 8006550:	680e      	ldr	r6, [r1, #0]
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	2e00      	cmp	r6, #0
 8006556:	da03      	bge.n	8006560 <_printf_i+0xc8>
 8006558:	232d      	movs	r3, #45	; 0x2d
 800655a:	4276      	negs	r6, r6
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	230a      	movs	r3, #10
 8006562:	485e      	ldr	r0, [pc, #376]	; (80066dc <_printf_i+0x244>)
 8006564:	e019      	b.n	800659a <_printf_i+0x102>
 8006566:	680e      	ldr	r6, [r1, #0]
 8006568:	f010 0f40 	tst.w	r0, #64	; 0x40
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	bf18      	it	ne
 8006570:	b236      	sxthne	r6, r6
 8006572:	e7ef      	b.n	8006554 <_printf_i+0xbc>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	6820      	ldr	r0, [r4, #0]
 8006578:	1d19      	adds	r1, r3, #4
 800657a:	6029      	str	r1, [r5, #0]
 800657c:	0601      	lsls	r1, r0, #24
 800657e:	d501      	bpl.n	8006584 <_printf_i+0xec>
 8006580:	681e      	ldr	r6, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0xf2>
 8006584:	0646      	lsls	r6, r0, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0xe8>
 8006588:	881e      	ldrh	r6, [r3, #0]
 800658a:	2f6f      	cmp	r7, #111	; 0x6f
 800658c:	bf0c      	ite	eq
 800658e:	2308      	moveq	r3, #8
 8006590:	230a      	movne	r3, #10
 8006592:	4852      	ldr	r0, [pc, #328]	; (80066dc <_printf_i+0x244>)
 8006594:	2100      	movs	r1, #0
 8006596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800659a:	6865      	ldr	r5, [r4, #4]
 800659c:	2d00      	cmp	r5, #0
 800659e:	bfa8      	it	ge
 80065a0:	6821      	ldrge	r1, [r4, #0]
 80065a2:	60a5      	str	r5, [r4, #8]
 80065a4:	bfa4      	itt	ge
 80065a6:	f021 0104 	bicge.w	r1, r1, #4
 80065aa:	6021      	strge	r1, [r4, #0]
 80065ac:	b90e      	cbnz	r6, 80065b2 <_printf_i+0x11a>
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	d04d      	beq.n	800664e <_printf_i+0x1b6>
 80065b2:	4615      	mov	r5, r2
 80065b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80065b8:	fb03 6711 	mls	r7, r3, r1, r6
 80065bc:	5dc7      	ldrb	r7, [r0, r7]
 80065be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065c2:	4637      	mov	r7, r6
 80065c4:	42bb      	cmp	r3, r7
 80065c6:	460e      	mov	r6, r1
 80065c8:	d9f4      	bls.n	80065b4 <_printf_i+0x11c>
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d10b      	bne.n	80065e6 <_printf_i+0x14e>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	07de      	lsls	r6, r3, #31
 80065d2:	d508      	bpl.n	80065e6 <_printf_i+0x14e>
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	6861      	ldr	r1, [r4, #4]
 80065d8:	4299      	cmp	r1, r3
 80065da:	bfde      	ittt	le
 80065dc:	2330      	movle	r3, #48	; 0x30
 80065de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065e6:	1b52      	subs	r2, r2, r5
 80065e8:	6122      	str	r2, [r4, #16]
 80065ea:	464b      	mov	r3, r9
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f8cd a000 	str.w	sl, [sp]
 80065f4:	aa03      	add	r2, sp, #12
 80065f6:	f7ff fedf 	bl	80063b8 <_printf_common>
 80065fa:	3001      	adds	r0, #1
 80065fc:	d14c      	bne.n	8006698 <_printf_i+0x200>
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006602:	b004      	add	sp, #16
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	4834      	ldr	r0, [pc, #208]	; (80066dc <_printf_i+0x244>)
 800660a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800660e:	6829      	ldr	r1, [r5, #0]
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	f851 6b04 	ldr.w	r6, [r1], #4
 8006616:	6029      	str	r1, [r5, #0]
 8006618:	061d      	lsls	r5, r3, #24
 800661a:	d514      	bpl.n	8006646 <_printf_i+0x1ae>
 800661c:	07df      	lsls	r7, r3, #31
 800661e:	bf44      	itt	mi
 8006620:	f043 0320 	orrmi.w	r3, r3, #32
 8006624:	6023      	strmi	r3, [r4, #0]
 8006626:	b91e      	cbnz	r6, 8006630 <_printf_i+0x198>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f023 0320 	bic.w	r3, r3, #32
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	2310      	movs	r3, #16
 8006632:	e7af      	b.n	8006594 <_printf_i+0xfc>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	f043 0320 	orr.w	r3, r3, #32
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	2378      	movs	r3, #120	; 0x78
 800663e:	4828      	ldr	r0, [pc, #160]	; (80066e0 <_printf_i+0x248>)
 8006640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006644:	e7e3      	b.n	800660e <_printf_i+0x176>
 8006646:	0659      	lsls	r1, r3, #25
 8006648:	bf48      	it	mi
 800664a:	b2b6      	uxthmi	r6, r6
 800664c:	e7e6      	b.n	800661c <_printf_i+0x184>
 800664e:	4615      	mov	r5, r2
 8006650:	e7bb      	b.n	80065ca <_printf_i+0x132>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	6826      	ldr	r6, [r4, #0]
 8006656:	1d18      	adds	r0, r3, #4
 8006658:	6961      	ldr	r1, [r4, #20]
 800665a:	6028      	str	r0, [r5, #0]
 800665c:	0635      	lsls	r5, r6, #24
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	d501      	bpl.n	8006666 <_printf_i+0x1ce>
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	e002      	b.n	800666c <_printf_i+0x1d4>
 8006666:	0670      	lsls	r0, r6, #25
 8006668:	d5fb      	bpl.n	8006662 <_printf_i+0x1ca>
 800666a:	8019      	strh	r1, [r3, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	4615      	mov	r5, r2
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	e7ba      	b.n	80065ea <_printf_i+0x152>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	2100      	movs	r1, #0
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	4628      	mov	r0, r5
 8006682:	f000 f999 	bl	80069b8 <memchr>
 8006686:	b108      	cbz	r0, 800668c <_printf_i+0x1f4>
 8006688:	1b40      	subs	r0, r0, r5
 800668a:	6060      	str	r0, [r4, #4]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	2300      	movs	r3, #0
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006696:	e7a8      	b.n	80065ea <_printf_i+0x152>
 8006698:	462a      	mov	r2, r5
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	47d0      	blx	sl
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0ab      	beq.n	80065fe <_printf_i+0x166>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	079b      	lsls	r3, r3, #30
 80066aa:	d413      	bmi.n	80066d4 <_printf_i+0x23c>
 80066ac:	68e0      	ldr	r0, [r4, #12]
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	4298      	cmp	r0, r3
 80066b2:	bfb8      	it	lt
 80066b4:	4618      	movlt	r0, r3
 80066b6:	e7a4      	b.n	8006602 <_printf_i+0x16a>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4632      	mov	r2, r6
 80066bc:	4649      	mov	r1, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	47d0      	blx	sl
 80066c2:	3001      	adds	r0, #1
 80066c4:	d09b      	beq.n	80065fe <_printf_i+0x166>
 80066c6:	3501      	adds	r5, #1
 80066c8:	68e3      	ldr	r3, [r4, #12]
 80066ca:	9903      	ldr	r1, [sp, #12]
 80066cc:	1a5b      	subs	r3, r3, r1
 80066ce:	42ab      	cmp	r3, r5
 80066d0:	dcf2      	bgt.n	80066b8 <_printf_i+0x220>
 80066d2:	e7eb      	b.n	80066ac <_printf_i+0x214>
 80066d4:	2500      	movs	r5, #0
 80066d6:	f104 0619 	add.w	r6, r4, #25
 80066da:	e7f5      	b.n	80066c8 <_printf_i+0x230>
 80066dc:	08007259 	.word	0x08007259
 80066e0:	0800726a 	.word	0x0800726a

080066e4 <_sbrk_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	2300      	movs	r3, #0
 80066e8:	4d05      	ldr	r5, [pc, #20]	; (8006700 <_sbrk_r+0x1c>)
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	f7fb fdd0 	bl	8002294 <_sbrk>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_sbrk_r+0x1a>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_sbrk_r+0x1a>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	2000023c 	.word	0x2000023c

08006704 <__sread>:
 8006704:	b510      	push	{r4, lr}
 8006706:	460c      	mov	r4, r1
 8006708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670c:	f000 f96e 	bl	80069ec <_read_r>
 8006710:	2800      	cmp	r0, #0
 8006712:	bfab      	itete	ge
 8006714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006716:	89a3      	ldrhlt	r3, [r4, #12]
 8006718:	181b      	addge	r3, r3, r0
 800671a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800671e:	bfac      	ite	ge
 8006720:	6563      	strge	r3, [r4, #84]	; 0x54
 8006722:	81a3      	strhlt	r3, [r4, #12]
 8006724:	bd10      	pop	{r4, pc}

08006726 <__swrite>:
 8006726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	461f      	mov	r7, r3
 800672c:	898b      	ldrh	r3, [r1, #12]
 800672e:	4605      	mov	r5, r0
 8006730:	05db      	lsls	r3, r3, #23
 8006732:	460c      	mov	r4, r1
 8006734:	4616      	mov	r6, r2
 8006736:	d505      	bpl.n	8006744 <__swrite+0x1e>
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006740:	f000 f928 	bl	8006994 <_lseek_r>
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	4632      	mov	r2, r6
 8006748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	4628      	mov	r0, r5
 8006750:	463b      	mov	r3, r7
 8006752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	f000 b869 	b.w	8006830 <_write_r>

0800675e <__sseek>:
 800675e:	b510      	push	{r4, lr}
 8006760:	460c      	mov	r4, r1
 8006762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006766:	f000 f915 	bl	8006994 <_lseek_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	bf15      	itete	ne
 8006770:	6560      	strne	r0, [r4, #84]	; 0x54
 8006772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800677a:	81a3      	strheq	r3, [r4, #12]
 800677c:	bf18      	it	ne
 800677e:	81a3      	strhne	r3, [r4, #12]
 8006780:	bd10      	pop	{r4, pc}

08006782 <__sclose>:
 8006782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006786:	f000 b8d3 	b.w	8006930 <_close_r>
	...

0800678c <__swbuf_r>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	460e      	mov	r6, r1
 8006790:	4614      	mov	r4, r2
 8006792:	4605      	mov	r5, r0
 8006794:	b118      	cbz	r0, 800679e <__swbuf_r+0x12>
 8006796:	6983      	ldr	r3, [r0, #24]
 8006798:	b90b      	cbnz	r3, 800679e <__swbuf_r+0x12>
 800679a:	f7ff facb 	bl	8005d34 <__sinit>
 800679e:	4b21      	ldr	r3, [pc, #132]	; (8006824 <__swbuf_r+0x98>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d12b      	bne.n	80067fc <__swbuf_r+0x70>
 80067a4:	686c      	ldr	r4, [r5, #4]
 80067a6:	69a3      	ldr	r3, [r4, #24]
 80067a8:	60a3      	str	r3, [r4, #8]
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	071a      	lsls	r2, r3, #28
 80067ae:	d52f      	bpl.n	8006810 <__swbuf_r+0x84>
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	b36b      	cbz	r3, 8006810 <__swbuf_r+0x84>
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	b2f6      	uxtb	r6, r6
 80067ba:	1ac0      	subs	r0, r0, r3
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	4637      	mov	r7, r6
 80067c0:	4283      	cmp	r3, r0
 80067c2:	dc04      	bgt.n	80067ce <__swbuf_r+0x42>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7ff fa20 	bl	8005c0c <_fflush_r>
 80067cc:	bb30      	cbnz	r0, 800681c <__swbuf_r+0x90>
 80067ce:	68a3      	ldr	r3, [r4, #8]
 80067d0:	3001      	adds	r0, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	60a3      	str	r3, [r4, #8]
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	701e      	strb	r6, [r3, #0]
 80067de:	6963      	ldr	r3, [r4, #20]
 80067e0:	4283      	cmp	r3, r0
 80067e2:	d004      	beq.n	80067ee <__swbuf_r+0x62>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	07db      	lsls	r3, r3, #31
 80067e8:	d506      	bpl.n	80067f8 <__swbuf_r+0x6c>
 80067ea:	2e0a      	cmp	r6, #10
 80067ec:	d104      	bne.n	80067f8 <__swbuf_r+0x6c>
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f7ff fa0b 	bl	8005c0c <_fflush_r>
 80067f6:	b988      	cbnz	r0, 800681c <__swbuf_r+0x90>
 80067f8:	4638      	mov	r0, r7
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <__swbuf_r+0x9c>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d101      	bne.n	8006806 <__swbuf_r+0x7a>
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	e7cf      	b.n	80067a6 <__swbuf_r+0x1a>
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <__swbuf_r+0xa0>)
 8006808:	429c      	cmp	r4, r3
 800680a:	bf08      	it	eq
 800680c:	68ec      	ldreq	r4, [r5, #12]
 800680e:	e7ca      	b.n	80067a6 <__swbuf_r+0x1a>
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f81e 	bl	8006854 <__swsetup_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	d0cb      	beq.n	80067b4 <__swbuf_r+0x28>
 800681c:	f04f 37ff 	mov.w	r7, #4294967295
 8006820:	e7ea      	b.n	80067f8 <__swbuf_r+0x6c>
 8006822:	bf00      	nop
 8006824:	08007208 	.word	0x08007208
 8006828:	08007228 	.word	0x08007228
 800682c:	080071e8 	.word	0x080071e8

08006830 <_write_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	4611      	mov	r1, r2
 8006838:	2200      	movs	r2, #0
 800683a:	4d05      	ldr	r5, [pc, #20]	; (8006850 <_write_r+0x20>)
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fb fcdb 	bl	80021fa <_write>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_write_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_write_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	2000023c 	.word	0x2000023c

08006854 <__swsetup_r>:
 8006854:	4b32      	ldr	r3, [pc, #200]	; (8006920 <__swsetup_r+0xcc>)
 8006856:	b570      	push	{r4, r5, r6, lr}
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	4606      	mov	r6, r0
 800685c:	460c      	mov	r4, r1
 800685e:	b125      	cbz	r5, 800686a <__swsetup_r+0x16>
 8006860:	69ab      	ldr	r3, [r5, #24]
 8006862:	b913      	cbnz	r3, 800686a <__swsetup_r+0x16>
 8006864:	4628      	mov	r0, r5
 8006866:	f7ff fa65 	bl	8005d34 <__sinit>
 800686a:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <__swsetup_r+0xd0>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d10f      	bne.n	8006890 <__swsetup_r+0x3c>
 8006870:	686c      	ldr	r4, [r5, #4]
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006878:	0719      	lsls	r1, r3, #28
 800687a:	d42c      	bmi.n	80068d6 <__swsetup_r+0x82>
 800687c:	06dd      	lsls	r5, r3, #27
 800687e:	d411      	bmi.n	80068a4 <__swsetup_r+0x50>
 8006880:	2309      	movs	r3, #9
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	e03e      	b.n	800690e <__swsetup_r+0xba>
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <__swsetup_r+0xd4>)
 8006892:	429c      	cmp	r4, r3
 8006894:	d101      	bne.n	800689a <__swsetup_r+0x46>
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	e7eb      	b.n	8006872 <__swsetup_r+0x1e>
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <__swsetup_r+0xd8>)
 800689c:	429c      	cmp	r4, r3
 800689e:	bf08      	it	eq
 80068a0:	68ec      	ldreq	r4, [r5, #12]
 80068a2:	e7e6      	b.n	8006872 <__swsetup_r+0x1e>
 80068a4:	0758      	lsls	r0, r3, #29
 80068a6:	d512      	bpl.n	80068ce <__swsetup_r+0x7a>
 80068a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068aa:	b141      	cbz	r1, 80068be <__swsetup_r+0x6a>
 80068ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <__swsetup_r+0x66>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff fb4b 	bl	8005f50 <_free_r>
 80068ba:	2300      	movs	r3, #0
 80068bc:	6363      	str	r3, [r4, #52]	; 0x34
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	6063      	str	r3, [r4, #4]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b94b      	cbnz	r3, 80068ee <__swsetup_r+0x9a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d003      	beq.n	80068ee <__swsetup_r+0x9a>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff fae9 	bl	8005ec0 <__smakebuf_r>
 80068ee:	89a0      	ldrh	r0, [r4, #12]
 80068f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f4:	f010 0301 	ands.w	r3, r0, #1
 80068f8:	d00a      	beq.n	8006910 <__swsetup_r+0xbc>
 80068fa:	2300      	movs	r3, #0
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	6963      	ldr	r3, [r4, #20]
 8006900:	425b      	negs	r3, r3
 8006902:	61a3      	str	r3, [r4, #24]
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b943      	cbnz	r3, 800691a <__swsetup_r+0xc6>
 8006908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800690c:	d1ba      	bne.n	8006884 <__swsetup_r+0x30>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	0781      	lsls	r1, r0, #30
 8006912:	bf58      	it	pl
 8006914:	6963      	ldrpl	r3, [r4, #20]
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	e7f4      	b.n	8006904 <__swsetup_r+0xb0>
 800691a:	2000      	movs	r0, #0
 800691c:	e7f7      	b.n	800690e <__swsetup_r+0xba>
 800691e:	bf00      	nop
 8006920:	2000000c 	.word	0x2000000c
 8006924:	08007208 	.word	0x08007208
 8006928:	08007228 	.word	0x08007228
 800692c:	080071e8 	.word	0x080071e8

08006930 <_close_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	2300      	movs	r3, #0
 8006934:	4d05      	ldr	r5, [pc, #20]	; (800694c <_close_r+0x1c>)
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fb fc79 	bl	8002232 <_close>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_close_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_close_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	2000023c 	.word	0x2000023c

08006950 <_fstat_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	2300      	movs	r3, #0
 8006954:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_fstat_r+0x20>)
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	f7fb fc73 	bl	8002248 <_fstat>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d102      	bne.n	800696c <_fstat_r+0x1c>
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	b103      	cbz	r3, 800696c <_fstat_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd38      	pop	{r3, r4, r5, pc}
 800696e:	bf00      	nop
 8006970:	2000023c 	.word	0x2000023c

08006974 <_isatty_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	2300      	movs	r3, #0
 8006978:	4d05      	ldr	r5, [pc, #20]	; (8006990 <_isatty_r+0x1c>)
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fb fc71 	bl	8002266 <_isatty>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_isatty_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_isatty_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	2000023c 	.word	0x2000023c

08006994 <_lseek_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4604      	mov	r4, r0
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	2200      	movs	r2, #0
 800699e:	4d05      	ldr	r5, [pc, #20]	; (80069b4 <_lseek_r+0x20>)
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fb fc69 	bl	800227a <_lseek>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_lseek_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_lseek_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	2000023c 	.word	0x2000023c

080069b8 <memchr>:
 80069b8:	4603      	mov	r3, r0
 80069ba:	b510      	push	{r4, lr}
 80069bc:	b2c9      	uxtb	r1, r1
 80069be:	4402      	add	r2, r0
 80069c0:	4293      	cmp	r3, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	d101      	bne.n	80069ca <memchr+0x12>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e003      	b.n	80069d2 <memchr+0x1a>
 80069ca:	7804      	ldrb	r4, [r0, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	428c      	cmp	r4, r1
 80069d0:	d1f6      	bne.n	80069c0 <memchr+0x8>
 80069d2:	bd10      	pop	{r4, pc}

080069d4 <__malloc_lock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__malloc_lock+0x8>)
 80069d6:	f7ff ba4b 	b.w	8005e70 <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20000230 	.word	0x20000230

080069e0 <__malloc_unlock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__malloc_unlock+0x8>)
 80069e2:	f7ff ba46 	b.w	8005e72 <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000230 	.word	0x20000230

080069ec <_read_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	2200      	movs	r2, #0
 80069f6:	4d05      	ldr	r5, [pc, #20]	; (8006a0c <_read_r+0x20>)
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fb fbe0 	bl	80021c0 <_read>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_read_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_read_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	2000023c 	.word	0x2000023c

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
